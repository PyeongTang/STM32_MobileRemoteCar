
mobileRemoteCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005760  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080058f8  080058f8  000068f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005910  08005910  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005910  08005910  00006910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005918  08005918  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005918  08005918  00006918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800591c  0800591c  0000691c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005920  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000000c  0800592c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  0800592c  00007250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fed3  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ef  00000000  00000000  00016f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00019900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad1  00000000  00000000  0001a708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181a5  00000000  00000000  0001b1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001358f  00000000  00000000  0003337e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8b8  00000000  00000000  0004690d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d51c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003934  00000000  00000000  000d5208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d8b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080058e0 	.word	0x080058e0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080058e0 	.word	0x080058e0

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	@ 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295
 80007f8:	f000 b96a 	b.w	8000ad0 <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9d08      	ldr	r5, [sp, #32]
 800081a:	460c      	mov	r4, r1
 800081c:	2b00      	cmp	r3, #0
 800081e:	d14e      	bne.n	80008be <__udivmoddi4+0xaa>
 8000820:	4694      	mov	ip, r2
 8000822:	458c      	cmp	ip, r1
 8000824:	4686      	mov	lr, r0
 8000826:	fab2 f282 	clz	r2, r2
 800082a:	d962      	bls.n	80008f2 <__udivmoddi4+0xde>
 800082c:	b14a      	cbz	r2, 8000842 <__udivmoddi4+0x2e>
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	4091      	lsls	r1, r2
 8000834:	fa20 f303 	lsr.w	r3, r0, r3
 8000838:	fa0c fc02 	lsl.w	ip, ip, r2
 800083c:	4319      	orrs	r1, r3
 800083e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000842:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000846:	fa1f f68c 	uxth.w	r6, ip
 800084a:	fbb1 f4f7 	udiv	r4, r1, r7
 800084e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000852:	fb07 1114 	mls	r1, r7, r4, r1
 8000856:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800085a:	fb04 f106 	mul.w	r1, r4, r6
 800085e:	4299      	cmp	r1, r3
 8000860:	d90a      	bls.n	8000878 <__udivmoddi4+0x64>
 8000862:	eb1c 0303 	adds.w	r3, ip, r3
 8000866:	f104 30ff 	add.w	r0, r4, #4294967295
 800086a:	f080 8112 	bcs.w	8000a92 <__udivmoddi4+0x27e>
 800086e:	4299      	cmp	r1, r3
 8000870:	f240 810f 	bls.w	8000a92 <__udivmoddi4+0x27e>
 8000874:	3c02      	subs	r4, #2
 8000876:	4463      	add	r3, ip
 8000878:	1a59      	subs	r1, r3, r1
 800087a:	fa1f f38e 	uxth.w	r3, lr
 800087e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000882:	fb07 1110 	mls	r1, r7, r0, r1
 8000886:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800088a:	fb00 f606 	mul.w	r6, r0, r6
 800088e:	429e      	cmp	r6, r3
 8000890:	d90a      	bls.n	80008a8 <__udivmoddi4+0x94>
 8000892:	eb1c 0303 	adds.w	r3, ip, r3
 8000896:	f100 31ff 	add.w	r1, r0, #4294967295
 800089a:	f080 80fc 	bcs.w	8000a96 <__udivmoddi4+0x282>
 800089e:	429e      	cmp	r6, r3
 80008a0:	f240 80f9 	bls.w	8000a96 <__udivmoddi4+0x282>
 80008a4:	4463      	add	r3, ip
 80008a6:	3802      	subs	r0, #2
 80008a8:	1b9b      	subs	r3, r3, r6
 80008aa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008ae:	2100      	movs	r1, #0
 80008b0:	b11d      	cbz	r5, 80008ba <__udivmoddi4+0xa6>
 80008b2:	40d3      	lsrs	r3, r2
 80008b4:	2200      	movs	r2, #0
 80008b6:	e9c5 3200 	strd	r3, r2, [r5]
 80008ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008be:	428b      	cmp	r3, r1
 80008c0:	d905      	bls.n	80008ce <__udivmoddi4+0xba>
 80008c2:	b10d      	cbz	r5, 80008c8 <__udivmoddi4+0xb4>
 80008c4:	e9c5 0100 	strd	r0, r1, [r5]
 80008c8:	2100      	movs	r1, #0
 80008ca:	4608      	mov	r0, r1
 80008cc:	e7f5      	b.n	80008ba <__udivmoddi4+0xa6>
 80008ce:	fab3 f183 	clz	r1, r3
 80008d2:	2900      	cmp	r1, #0
 80008d4:	d146      	bne.n	8000964 <__udivmoddi4+0x150>
 80008d6:	42a3      	cmp	r3, r4
 80008d8:	d302      	bcc.n	80008e0 <__udivmoddi4+0xcc>
 80008da:	4290      	cmp	r0, r2
 80008dc:	f0c0 80f0 	bcc.w	8000ac0 <__udivmoddi4+0x2ac>
 80008e0:	1a86      	subs	r6, r0, r2
 80008e2:	eb64 0303 	sbc.w	r3, r4, r3
 80008e6:	2001      	movs	r0, #1
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d0e6      	beq.n	80008ba <__udivmoddi4+0xa6>
 80008ec:	e9c5 6300 	strd	r6, r3, [r5]
 80008f0:	e7e3      	b.n	80008ba <__udivmoddi4+0xa6>
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	f040 8090 	bne.w	8000a18 <__udivmoddi4+0x204>
 80008f8:	eba1 040c 	sub.w	r4, r1, ip
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	fa1f f78c 	uxth.w	r7, ip
 8000904:	2101      	movs	r1, #1
 8000906:	fbb4 f6f8 	udiv	r6, r4, r8
 800090a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800090e:	fb08 4416 	mls	r4, r8, r6, r4
 8000912:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000916:	fb07 f006 	mul.w	r0, r7, r6
 800091a:	4298      	cmp	r0, r3
 800091c:	d908      	bls.n	8000930 <__udivmoddi4+0x11c>
 800091e:	eb1c 0303 	adds.w	r3, ip, r3
 8000922:	f106 34ff 	add.w	r4, r6, #4294967295
 8000926:	d202      	bcs.n	800092e <__udivmoddi4+0x11a>
 8000928:	4298      	cmp	r0, r3
 800092a:	f200 80cd 	bhi.w	8000ac8 <__udivmoddi4+0x2b4>
 800092e:	4626      	mov	r6, r4
 8000930:	1a1c      	subs	r4, r3, r0
 8000932:	fa1f f38e 	uxth.w	r3, lr
 8000936:	fbb4 f0f8 	udiv	r0, r4, r8
 800093a:	fb08 4410 	mls	r4, r8, r0, r4
 800093e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000942:	fb00 f707 	mul.w	r7, r0, r7
 8000946:	429f      	cmp	r7, r3
 8000948:	d908      	bls.n	800095c <__udivmoddi4+0x148>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000952:	d202      	bcs.n	800095a <__udivmoddi4+0x146>
 8000954:	429f      	cmp	r7, r3
 8000956:	f200 80b0 	bhi.w	8000aba <__udivmoddi4+0x2a6>
 800095a:	4620      	mov	r0, r4
 800095c:	1bdb      	subs	r3, r3, r7
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	e7a5      	b.n	80008b0 <__udivmoddi4+0x9c>
 8000964:	f1c1 0620 	rsb	r6, r1, #32
 8000968:	408b      	lsls	r3, r1
 800096a:	fa22 f706 	lsr.w	r7, r2, r6
 800096e:	431f      	orrs	r7, r3
 8000970:	fa20 fc06 	lsr.w	ip, r0, r6
 8000974:	fa04 f301 	lsl.w	r3, r4, r1
 8000978:	ea43 030c 	orr.w	r3, r3, ip
 800097c:	40f4      	lsrs	r4, r6
 800097e:	fa00 f801 	lsl.w	r8, r0, r1
 8000982:	0c38      	lsrs	r0, r7, #16
 8000984:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000988:	fbb4 fef0 	udiv	lr, r4, r0
 800098c:	fa1f fc87 	uxth.w	ip, r7
 8000990:	fb00 441e 	mls	r4, r0, lr, r4
 8000994:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000998:	fb0e f90c 	mul.w	r9, lr, ip
 800099c:	45a1      	cmp	r9, r4
 800099e:	fa02 f201 	lsl.w	r2, r2, r1
 80009a2:	d90a      	bls.n	80009ba <__udivmoddi4+0x1a6>
 80009a4:	193c      	adds	r4, r7, r4
 80009a6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009aa:	f080 8084 	bcs.w	8000ab6 <__udivmoddi4+0x2a2>
 80009ae:	45a1      	cmp	r9, r4
 80009b0:	f240 8081 	bls.w	8000ab6 <__udivmoddi4+0x2a2>
 80009b4:	f1ae 0e02 	sub.w	lr, lr, #2
 80009b8:	443c      	add	r4, r7
 80009ba:	eba4 0409 	sub.w	r4, r4, r9
 80009be:	fa1f f983 	uxth.w	r9, r3
 80009c2:	fbb4 f3f0 	udiv	r3, r4, r0
 80009c6:	fb00 4413 	mls	r4, r0, r3, r4
 80009ca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ce:	fb03 fc0c 	mul.w	ip, r3, ip
 80009d2:	45a4      	cmp	ip, r4
 80009d4:	d907      	bls.n	80009e6 <__udivmoddi4+0x1d2>
 80009d6:	193c      	adds	r4, r7, r4
 80009d8:	f103 30ff 	add.w	r0, r3, #4294967295
 80009dc:	d267      	bcs.n	8000aae <__udivmoddi4+0x29a>
 80009de:	45a4      	cmp	ip, r4
 80009e0:	d965      	bls.n	8000aae <__udivmoddi4+0x29a>
 80009e2:	3b02      	subs	r3, #2
 80009e4:	443c      	add	r4, r7
 80009e6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ea:	fba0 9302 	umull	r9, r3, r0, r2
 80009ee:	eba4 040c 	sub.w	r4, r4, ip
 80009f2:	429c      	cmp	r4, r3
 80009f4:	46ce      	mov	lr, r9
 80009f6:	469c      	mov	ip, r3
 80009f8:	d351      	bcc.n	8000a9e <__udivmoddi4+0x28a>
 80009fa:	d04e      	beq.n	8000a9a <__udivmoddi4+0x286>
 80009fc:	b155      	cbz	r5, 8000a14 <__udivmoddi4+0x200>
 80009fe:	ebb8 030e 	subs.w	r3, r8, lr
 8000a02:	eb64 040c 	sbc.w	r4, r4, ip
 8000a06:	fa04 f606 	lsl.w	r6, r4, r6
 8000a0a:	40cb      	lsrs	r3, r1
 8000a0c:	431e      	orrs	r6, r3
 8000a0e:	40cc      	lsrs	r4, r1
 8000a10:	e9c5 6400 	strd	r6, r4, [r5]
 8000a14:	2100      	movs	r1, #0
 8000a16:	e750      	b.n	80008ba <__udivmoddi4+0xa6>
 8000a18:	f1c2 0320 	rsb	r3, r2, #32
 8000a1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a24:	fa24 f303 	lsr.w	r3, r4, r3
 8000a28:	4094      	lsls	r4, r2
 8000a2a:	430c      	orrs	r4, r1
 8000a2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a34:	fa1f f78c 	uxth.w	r7, ip
 8000a38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a40:	0c23      	lsrs	r3, r4, #16
 8000a42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a46:	fb00 f107 	mul.w	r1, r0, r7
 8000a4a:	4299      	cmp	r1, r3
 8000a4c:	d908      	bls.n	8000a60 <__udivmoddi4+0x24c>
 8000a4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a56:	d22c      	bcs.n	8000ab2 <__udivmoddi4+0x29e>
 8000a58:	4299      	cmp	r1, r3
 8000a5a:	d92a      	bls.n	8000ab2 <__udivmoddi4+0x29e>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a68:	fb08 3311 	mls	r3, r8, r1, r3
 8000a6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a70:	fb01 f307 	mul.w	r3, r1, r7
 8000a74:	42a3      	cmp	r3, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x276>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a80:	d213      	bcs.n	8000aaa <__udivmoddi4+0x296>
 8000a82:	42a3      	cmp	r3, r4
 8000a84:	d911      	bls.n	8000aaa <__udivmoddi4+0x296>
 8000a86:	3902      	subs	r1, #2
 8000a88:	4464      	add	r4, ip
 8000a8a:	1ae4      	subs	r4, r4, r3
 8000a8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a90:	e739      	b.n	8000906 <__udivmoddi4+0xf2>
 8000a92:	4604      	mov	r4, r0
 8000a94:	e6f0      	b.n	8000878 <__udivmoddi4+0x64>
 8000a96:	4608      	mov	r0, r1
 8000a98:	e706      	b.n	80008a8 <__udivmoddi4+0x94>
 8000a9a:	45c8      	cmp	r8, r9
 8000a9c:	d2ae      	bcs.n	80009fc <__udivmoddi4+0x1e8>
 8000a9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000aa2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000aa6:	3801      	subs	r0, #1
 8000aa8:	e7a8      	b.n	80009fc <__udivmoddi4+0x1e8>
 8000aaa:	4631      	mov	r1, r6
 8000aac:	e7ed      	b.n	8000a8a <__udivmoddi4+0x276>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	e799      	b.n	80009e6 <__udivmoddi4+0x1d2>
 8000ab2:	4630      	mov	r0, r6
 8000ab4:	e7d4      	b.n	8000a60 <__udivmoddi4+0x24c>
 8000ab6:	46d6      	mov	lr, sl
 8000ab8:	e77f      	b.n	80009ba <__udivmoddi4+0x1a6>
 8000aba:	4463      	add	r3, ip
 8000abc:	3802      	subs	r0, #2
 8000abe:	e74d      	b.n	800095c <__udivmoddi4+0x148>
 8000ac0:	4606      	mov	r6, r0
 8000ac2:	4623      	mov	r3, r4
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	e70f      	b.n	80008e8 <__udivmoddi4+0xd4>
 8000ac8:	3e02      	subs	r6, #2
 8000aca:	4463      	add	r3, ip
 8000acc:	e730      	b.n	8000930 <__udivmoddi4+0x11c>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_idiv0>:
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <AP_setup>:

uint16_t handleValue;
uint16_t accelValue;
uint8_t distanceValue;

void AP_setup(){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	HW_init();
 8000ad8:	f000 fba4 	bl	8001224 <HW_init>
	distanceValue = EMERGENCY_BRAKE_TH + 1;
 8000adc:	4b02      	ldr	r3, [pc, #8]	@ (8000ae8 <AP_setup+0x14>)
 8000ade:	220b      	movs	r2, #11
 8000ae0:	701a      	strb	r2, [r3, #0]
};
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000002c 	.word	0x2000002c

08000aec <AP_loop>:

void AP_loop(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	while (1){
		distanceValue = MRC_getDistance();
 8000af0:	f000 faa8 	bl	8001044 <MRC_getDistance>
 8000af4:	4603      	mov	r3, r0
 8000af6:	461a      	mov	r2, r3
 8000af8:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <AP_loop+0x50>)
 8000afa:	701a      	strb	r2, [r3, #0]
		if (distanceValue <= EMERGENCY_BRAKE_TH){
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <AP_loop+0x50>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b0a      	cmp	r3, #10
 8000b02:	d802      	bhi.n	8000b0a <AP_loop+0x1e>
			MRC_emergencyBrakeAllMotors();
 8000b04:	f000 fa8a 	bl	800101c <MRC_emergencyBrakeAllMotors>
 8000b08:	e013      	b.n	8000b32 <AP_loop+0x46>
		}
		else{
			handleValue = MRC_BT_getHandleValue();
 8000b0a:	f000 f865 	bl	8000bd8 <MRC_BT_getHandleValue>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <AP_loop+0x54>)
 8000b14:	801a      	strh	r2, [r3, #0]
			accelValue 	= MRC_BT_getAccelValue();
 8000b16:	f000 f86b 	bl	8000bf0 <MRC_BT_getAccelValue>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <AP_loop+0x58>)
 8000b20:	801a      	strh	r2, [r3, #0]
			MRC_drive(handleValue, accelValue);
 8000b22:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <AP_loop+0x54>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <AP_loop+0x58>)
 8000b28:	8812      	ldrh	r2, [r2, #0]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 f963 	bl	8000df8 <MRC_drive>
		}
		HAL_Delay(10);
 8000b32:	200a      	movs	r0, #10
 8000b34:	f001 f9fc 	bl	8001f30 <HAL_Delay>
		distanceValue = MRC_getDistance();
 8000b38:	e7da      	b.n	8000af0 <AP_loop+0x4>
 8000b3a:	bf00      	nop
 8000b3c:	2000002c 	.word	0x2000002c
 8000b40:	20000028 	.word	0x20000028
 8000b44:	2000002a 	.word	0x2000002a

08000b48 <MRC_BT_init>:

uint8_t MRC_rxBuffer[4] = {0,};
volatile uint16_t MRC_handleValue = 0;
volatile uint16_t MRC_accelValue = 0;

void MRC_BT_init(){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	HAL_UART_AbortReceive_IT(&huart6);
 8000b4c:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <MRC_BT_init+0x18>)
 8000b4e:	f003 fec9 	bl	80048e4 <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(&huart6, MRC_rxBuffer, sizeof(MRC_rxBuffer));
 8000b52:	2204      	movs	r2, #4
 8000b54:	4903      	ldr	r1, [pc, #12]	@ (8000b64 <MRC_BT_init+0x1c>)
 8000b56:	4802      	ldr	r0, [pc, #8]	@ (8000b60 <MRC_BT_init+0x18>)
 8000b58:	f003 fe9e 	bl	8004898 <HAL_UART_Receive_IT>
};
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000204 	.word	0x20000204
 8000b64:	20000030 	.word	0x20000030

08000b68 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	HAL_UART_AbortReceive_IT(&huart6);
 8000b70:	4814      	ldr	r0, [pc, #80]	@ (8000bc4 <HAL_UART_RxCpltCallback+0x5c>)
 8000b72:	f003 feb7 	bl	80048e4 <HAL_UART_AbortReceive_IT>
	if(huart->Instance == USART6){
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a13      	ldr	r2, [pc, #76]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x60>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d11c      	bne.n	8000bba <HAL_UART_RxCpltCallback+0x52>
		MRC_accelValue 	 = (MRC_rxBuffer[1] << 8 | MRC_rxBuffer[0]);
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <HAL_UART_RxCpltCallback+0x64>)
 8000b82:	785b      	ldrb	r3, [r3, #1]
 8000b84:	021b      	lsls	r3, r3, #8
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <HAL_UART_RxCpltCallback+0x64>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	b21b      	sxth	r3, r3
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x68>)
 8000b96:	801a      	strh	r2, [r3, #0]
		MRC_handleValue  = (MRC_rxBuffer[3] << 8 | MRC_rxBuffer[2]);
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <HAL_UART_RxCpltCallback+0x64>)
 8000b9a:	78db      	ldrb	r3, [r3, #3]
 8000b9c:	021b      	lsls	r3, r3, #8
 8000b9e:	b21a      	sxth	r2, r3
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <HAL_UART_RxCpltCallback+0x64>)
 8000ba2:	789b      	ldrb	r3, [r3, #2]
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x6c>)
 8000bae:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart6, MRC_rxBuffer, sizeof(MRC_rxBuffer));
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	4906      	ldr	r1, [pc, #24]	@ (8000bcc <HAL_UART_RxCpltCallback+0x64>)
 8000bb4:	4803      	ldr	r0, [pc, #12]	@ (8000bc4 <HAL_UART_RxCpltCallback+0x5c>)
 8000bb6:	f003 fe6f 	bl	8004898 <HAL_UART_Receive_IT>
	}
};
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000204 	.word	0x20000204
 8000bc8:	40011400 	.word	0x40011400
 8000bcc:	20000030 	.word	0x20000030
 8000bd0:	20000036 	.word	0x20000036
 8000bd4:	20000034 	.word	0x20000034

08000bd8 <MRC_BT_getHandleValue>:

uint16_t MRC_BT_getHandleValue(){
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
	return MRC_handleValue;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	@ (8000bec <MRC_BT_getHandleValue+0x14>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	b29b      	uxth	r3, r3
};
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	20000034 	.word	0x20000034

08000bf0 <MRC_BT_getAccelValue>:

uint16_t MRC_BT_getAccelValue(){
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
	return MRC_accelValue;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <MRC_BT_getAccelValue+0x14>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	b29b      	uxth	r3, r3
};
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	20000036 	.word	0x20000036

08000c08 <DCMOTOR_init>:
					uint16_t 			_IN1_GPIO_PIN,\
					GPIO_TypeDef* 		_IN2_GPIO_PORT,\
					uint16_t 			_IN2_GPIO_PIN,\
					TIM_HandleTypeDef* 	_EN_TIMER_HANDLER,\
					DCMOTOR_DEVICE_IDX	_deviceIdx
					){
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	4613      	mov	r3, r2
 8000c16:	80fb      	strh	r3, [r7, #6]
	_INST->IN1_GPIO_PORT 	= _IN1_GPIO_PORT;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	601a      	str	r2, [r3, #0]
	_INST->IN1_GPIO_PIN  	= _IN1_GPIO_PIN;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	88fa      	ldrh	r2, [r7, #6]
 8000c22:	809a      	strh	r2, [r3, #4]
	_INST->IN2_GPIO_PORT 	= _IN2_GPIO_PORT;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	609a      	str	r2, [r3, #8]
	_INST->IN2_GPIO_PIN  	= _IN2_GPIO_PIN;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	8b3a      	ldrh	r2, [r7, #24]
 8000c2e:	819a      	strh	r2, [r3, #12]
	_INST->EN_TIMER_HANDLER = _EN_TIMER_HANDLER;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	69fa      	ldr	r2, [r7, #28]
 8000c34:	611a      	str	r2, [r3, #16]
	_INST->deviceIdx		= _deviceIdx;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c3c:	759a      	strb	r2, [r3, #22]
};
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <DCMOTOR_setDirection>:

void DCMOTOR_setDirection(DCMOTOR* _INST, DCMOTOR_DIRECTION _DIR){
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	460b      	mov	r3, r1
 8000c54:	70fb      	strb	r3, [r7, #3]
	if (_DIR == FORWARD){
 8000c56:	78fb      	ldrb	r3, [r7, #3]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d110      	bne.n	8000c7e <DCMOTOR_setDirection+0x34>
		HAL_GPIO_WritePin(	_INST->IN1_GPIO_PORT,\
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6818      	ldr	r0, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	889b      	ldrh	r3, [r3, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	4619      	mov	r1, r3
 8000c68:	f001 fcae 	bl	80025c8 <HAL_GPIO_WritePin>
							_INST->IN1_GPIO_PIN,\
							GPIO_PIN_RESET);

		HAL_GPIO_WritePin(	_INST->IN2_GPIO_PORT,\
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6898      	ldr	r0, [r3, #8]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	899b      	ldrh	r3, [r3, #12]
 8000c74:	2201      	movs	r2, #1
 8000c76:	4619      	mov	r1, r3
 8000c78:	f001 fca6 	bl	80025c8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(	_INST->IN2_GPIO_PORT,\
							_INST->IN2_GPIO_PIN,\
							GPIO_PIN_RESET);
	}
};
 8000c7c:	e012      	b.n	8000ca4 <DCMOTOR_setDirection+0x5a>
	else if (_DIR == BACKWARD){
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d10f      	bne.n	8000ca4 <DCMOTOR_setDirection+0x5a>
		HAL_GPIO_WritePin(	_INST->IN1_GPIO_PORT,\
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	889b      	ldrh	r3, [r3, #4]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f001 fc9a 	bl	80025c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(	_INST->IN2_GPIO_PORT,\
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6898      	ldr	r0, [r3, #8]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	899b      	ldrh	r3, [r3, #12]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f001 fc92 	bl	80025c8 <HAL_GPIO_WritePin>
};
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <DCMOTOR_emergencyBrake>:

void DCMOTOR_emergencyBrake(DCMOTOR* _INST){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(	_INST->IN1_GPIO_PORT,\
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	889b      	ldrh	r3, [r3, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f001 fc82 	bl	80025c8 <HAL_GPIO_WritePin>
						_INST->IN1_GPIO_PIN,\
						GPIO_PIN_RESET);

	HAL_GPIO_WritePin(	_INST->IN2_GPIO_PORT,\
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6898      	ldr	r0, [r3, #8]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	899b      	ldrh	r3, [r3, #12]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f001 fc7a 	bl	80025c8 <HAL_GPIO_WritePin>
						_INST->IN2_GPIO_PIN,\
						GPIO_PIN_RESET);
};
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <DCMOTOR_setDuty>:

void DCMOTOR_setDuty(DCMOTOR* _INST, uint16_t dutyValue){
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	807b      	strh	r3, [r7, #2]
	if 	(_INST->deviceIdx == DCMOTOR_BACK){
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7d9b      	ldrb	r3, [r3, #22]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d105      	bne.n	8000cfc <DCMOTOR_setDuty+0x20>
		_INST->EN_TIMER_HANDLER->Instance->CCR1 = dutyValue;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	887a      	ldrh	r2, [r7, #2]
 8000cf8:	635a      	str	r2, [r3, #52]	@ 0x34
		_INST->EN_TIMER_HANDLER->Instance->CCR2 = dutyValue;
	}
	else if (_INST->deviceIdx == DCMOTOR_FRONT_LEFT){
		_INST->EN_TIMER_HANDLER->Instance->CCR3 = dutyValue;
	}
};
 8000cfa:	e012      	b.n	8000d22 <DCMOTOR_setDuty+0x46>
	else if (_INST->deviceIdx == DCMOTOR_FRONT_RIGHT){
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7d9b      	ldrb	r3, [r3, #22]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d105      	bne.n	8000d10 <DCMOTOR_setDuty+0x34>
		_INST->EN_TIMER_HANDLER->Instance->CCR2 = dutyValue;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	691b      	ldr	r3, [r3, #16]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	887a      	ldrh	r2, [r7, #2]
 8000d0c:	639a      	str	r2, [r3, #56]	@ 0x38
};
 8000d0e:	e008      	b.n	8000d22 <DCMOTOR_setDuty+0x46>
	else if (_INST->deviceIdx == DCMOTOR_FRONT_LEFT){
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	7d9b      	ldrb	r3, [r3, #22]
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d104      	bne.n	8000d22 <DCMOTOR_setDuty+0x46>
		_INST->EN_TIMER_HANDLER->Instance->CCR3 = dutyValue;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	887a      	ldrh	r2, [r7, #2]
 8000d20:	63da      	str	r2, [r3, #60]	@ 0x3c
};
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <MRC_init>:
uint16_t backMotorDuty;

uint16_t accelIntensity;
float handleIntensity;

void MRC_init(){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af04      	add	r7, sp, #16

//	Initialize Ultrasonic Sensor
  ULTRA_init();
 8000d36:	f000 f98d 	bl	8001054 <ULTRA_init>

//	Initialize Front and Back Motors
  DCMOTOR_init(&MRC_frontMotorLeft,\
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	9302      	str	r3, [sp, #8]
 8000d3e:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <MRC_init+0xa0>)
 8000d40:	9301      	str	r3, [sp, #4]
 8000d42:	2340      	movs	r3, #64	@ 0x40
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	4b23      	ldr	r3, [pc, #140]	@ (8000dd4 <MRC_init+0xa4>)
 8000d48:	2280      	movs	r2, #128	@ 0x80
 8000d4a:	4923      	ldr	r1, [pc, #140]	@ (8000dd8 <MRC_init+0xa8>)
 8000d4c:	4823      	ldr	r0, [pc, #140]	@ (8000ddc <MRC_init+0xac>)
 8000d4e:	f7ff ff5b 	bl	8000c08 <DCMOTOR_init>
		  	  FRONT_L_IN2_GPIO_Port,\
		  	  FRONT_L_IN2_Pin,\
		  	  &htim3,\
		  	  DCMOTOR_FRONT_LEFT);

  DCMOTOR_init(&MRC_frontMotorRight,\
 8000d52:	2302      	movs	r3, #2
 8000d54:	9302      	str	r3, [sp, #8]
 8000d56:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <MRC_init+0xa0>)
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <MRC_init+0xa8>)
 8000d62:	2280      	movs	r2, #128	@ 0x80
 8000d64:	491e      	ldr	r1, [pc, #120]	@ (8000de0 <MRC_init+0xb0>)
 8000d66:	481f      	ldr	r0, [pc, #124]	@ (8000de4 <MRC_init+0xb4>)
 8000d68:	f7ff ff4e 	bl	8000c08 <DCMOTOR_init>
		  	  FRONT_R_IN2_GPIO_Port,\
		  	  FRONT_R_IN2_Pin,\
		  	  &htim3,\
		  	  DCMOTOR_FRONT_RIGHT);

  DCMOTOR_init(&MRC_backMotor,\
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	9302      	str	r3, [sp, #8]
 8000d70:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <MRC_init+0xa0>)
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	2310      	movs	r3, #16
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	4b16      	ldr	r3, [pc, #88]	@ (8000dd4 <MRC_init+0xa4>)
 8000d7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d7e:	4915      	ldr	r1, [pc, #84]	@ (8000dd4 <MRC_init+0xa4>)
 8000d80:	4819      	ldr	r0, [pc, #100]	@ (8000de8 <MRC_init+0xb8>)
 8000d82:	f7ff ff41 	bl	8000c08 <DCMOTOR_init>
		  	  BACK_IN2_GPIO_Port,\
		  	  BACK_IN2_Pin,\
		  	  &htim3,\
		  	  DCMOTOR_BACK);

  frontRightMotorDuty = 0;
 8000d86:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <MRC_init+0xbc>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	801a      	strh	r2, [r3, #0]
  frontLeftMotorDuty = 0;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <MRC_init+0xc0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	801a      	strh	r2, [r3, #0]
  backMotorDuty = 0;
 8000d92:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <MRC_init+0xc4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	801a      	strh	r2, [r3, #0]

//  Initialize PWM Channel of Timers
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	480d      	ldr	r0, [pc, #52]	@ (8000dd0 <MRC_init+0xa0>)
 8000d9c:	f002 f9d2 	bl	8003144 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000da0:	2104      	movs	r1, #4
 8000da2:	480b      	ldr	r0, [pc, #44]	@ (8000dd0 <MRC_init+0xa0>)
 8000da4:	f002 f9ce 	bl	8003144 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000da8:	2108      	movs	r1, #8
 8000daa:	4809      	ldr	r0, [pc, #36]	@ (8000dd0 <MRC_init+0xa0>)
 8000dac:	f002 f9ca 	bl	8003144 <HAL_TIM_PWM_Start>

  htim3.Instance->CCR1 = 0;
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <MRC_init+0xa0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2200      	movs	r2, #0
 8000db6:	635a      	str	r2, [r3, #52]	@ 0x34
  htim3.Instance->CCR2 = 0;
 8000db8:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <MRC_init+0xa0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	639a      	str	r2, [r3, #56]	@ 0x38
  htim3.Instance->CCR3 = 0;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	@ (8000dd0 <MRC_init+0xa0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	63da      	str	r2, [r3, #60]	@ 0x3c
};
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000012c 	.word	0x2000012c
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	20000038 	.word	0x20000038
 8000de0:	40020800 	.word	0x40020800
 8000de4:	20000050 	.word	0x20000050
 8000de8:	20000068 	.word	0x20000068
 8000dec:	20000088 	.word	0x20000088
 8000df0:	2000008a 	.word	0x2000008a
 8000df4:	2000008c 	.word	0x2000008c

08000df8 <MRC_drive>:

void MRC_drive(uint16_t handleValue, uint16_t accelValue){
 8000df8:	b5b0      	push	{r4, r5, r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	460a      	mov	r2, r1
 8000e02:	80fb      	strh	r3, [r7, #6]
 8000e04:	4613      	mov	r3, r2
 8000e06:	80bb      	strh	r3, [r7, #4]
	accelIntensity = HW_abs(accelValue, INPUT_ADC_MID);
 8000e08:	88bb      	ldrh	r3, [r7, #4]
 8000e0a:	f240 72e2 	movw	r2, #2018	@ 0x7e2
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 fa0f 	bl	8001234 <HW_abs>
 8000e16:	4603      	mov	r3, r0
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	4b73      	ldr	r3, [pc, #460]	@ (8000fe8 <MRC_drive+0x1f0>)
 8000e1c:	801a      	strh	r2, [r3, #0]

	if (accelValue > INPUT_ADC_MID)
 8000e1e:	88bb      	ldrh	r3, [r7, #4]
 8000e20:	f240 72e2 	movw	r2, #2018	@ 0x7e2
 8000e24:	4293      	cmp	r3, r2
 8000e26:	dd03      	ble.n	8000e30 <MRC_drive+0x38>
		MRC_direction = FORWARD;
 8000e28:	4b70      	ldr	r3, [pc, #448]	@ (8000fec <MRC_drive+0x1f4>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e007      	b.n	8000e40 <MRC_drive+0x48>

	else if (accelValue <= INPUT_ADC_MID)
 8000e30:	88bb      	ldrh	r3, [r7, #4]
 8000e32:	f240 72e2 	movw	r2, #2018	@ 0x7e2
 8000e36:	4293      	cmp	r3, r2
 8000e38:	dc02      	bgt.n	8000e40 <MRC_drive+0x48>
		MRC_direction = BACKWARD;
 8000e3a:	4b6c      	ldr	r3, [pc, #432]	@ (8000fec <MRC_drive+0x1f4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]

	MRC_baseDuty =  (DCMOTOR_DUTY_MIN + \
 8000e40:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8000ff0 <MRC_drive+0x1f8>
 8000e44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
					((float)accelIntensity / (float)INPUT_ADC_MID) * \
 8000e48:	4b67      	ldr	r3, [pc, #412]	@ (8000fe8 <MRC_drive+0x1f0>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	ee07 3a90 	vmov	s15, r3
 8000e50:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8000e54:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8000ff4 <MRC_drive+0x1fc>
 8000e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e5c:	eec6 6a27 	vdiv.f32	s13, s12, s15
					(float)(DCMOTOR_DUTY_MAX - DCMOTOR_DUTY_MIN));
 8000e60:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000e64:	2300      	movs	r3, #0
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	ee07 3a90 	vmov	s15, r3
 8000e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
					((float)accelIntensity / (float)INPUT_ADC_MID) * \
 8000e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
	MRC_baseDuty =  (DCMOTOR_DUTY_MIN + \
 8000e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e78:	4b5f      	ldr	r3, [pc, #380]	@ (8000ff8 <MRC_drive+0x200>)
 8000e7a:	edc3 7a00 	vstr	s15, [r3]

	handleIntensity = (float)(handleValue - INPUT_ADC_MID) / (float)INPUT_ADC_MID;
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	f240 72e2 	movw	r2, #2018	@ 0x7e2
 8000e84:	1a9b      	subs	r3, r3, r2
 8000e86:	ee07 3a90 	vmov	s15, r3
 8000e8a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e8e:	eddf 7a59 	vldr	s15, [pc, #356]	@ 8000ff4 <MRC_drive+0x1fc>
 8000e92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e9a:	4b58      	ldr	r3, [pc, #352]	@ (8000ffc <MRC_drive+0x204>)
 8000e9c:	edc3 7a00 	vstr	s15, [r3]

	frontLeftMotorDuty  = (uint16_t)(MRC_baseDuty  * (1.0 + handleIntensity));
 8000ea0:	4b55      	ldr	r3, [pc, #340]	@ (8000ff8 <MRC_drive+0x200>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fc25 	bl	80006f4 <__aeabi_f2d>
 8000eaa:	4604      	mov	r4, r0
 8000eac:	460d      	mov	r5, r1
 8000eae:	4b53      	ldr	r3, [pc, #332]	@ (8000ffc <MRC_drive+0x204>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fc1e 	bl	80006f4 <__aeabi_f2d>
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	4b50      	ldr	r3, [pc, #320]	@ (8001000 <MRC_drive+0x208>)
 8000ebe:	f7ff fabb 	bl	8000438 <__adddf3>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	4629      	mov	r1, r5
 8000eca:	f7ff f985 	bl	80001d8 <__aeabi_dmul>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f7ff fc65 	bl	80007a4 <__aeabi_d2uiz>
 8000eda:	4603      	mov	r3, r0
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	4b49      	ldr	r3, [pc, #292]	@ (8001004 <MRC_drive+0x20c>)
 8000ee0:	801a      	strh	r2, [r3, #0]
	frontRightMotorDuty = (uint16_t)(MRC_baseDuty  * (1.0 - handleIntensity));
 8000ee2:	4b45      	ldr	r3, [pc, #276]	@ (8000ff8 <MRC_drive+0x200>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fc04 	bl	80006f4 <__aeabi_f2d>
 8000eec:	4604      	mov	r4, r0
 8000eee:	460d      	mov	r5, r1
 8000ef0:	4b42      	ldr	r3, [pc, #264]	@ (8000ffc <MRC_drive+0x204>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fbfd 	bl	80006f4 <__aeabi_f2d>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	f04f 0000 	mov.w	r0, #0
 8000f02:	493f      	ldr	r1, [pc, #252]	@ (8001000 <MRC_drive+0x208>)
 8000f04:	f7ff fa96 	bl	8000434 <__aeabi_dsub>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	4629      	mov	r1, r5
 8000f10:	f7ff f962 	bl	80001d8 <__aeabi_dmul>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	4610      	mov	r0, r2
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f7ff fc42 	bl	80007a4 <__aeabi_d2uiz>
 8000f20:	4603      	mov	r3, r0
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	4b38      	ldr	r3, [pc, #224]	@ (8001008 <MRC_drive+0x210>)
 8000f26:	801a      	strh	r2, [r3, #0]

	if (frontLeftMotorDuty  > DCMOTOR_DUTY_MAX) {frontLeftMotorDuty  = DCMOTOR_DUTY_MAX;}
 8000f28:	4b36      	ldr	r3, [pc, #216]	@ (8001004 <MRC_drive+0x20c>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000f32:	429a      	cmp	r2, r3
 8000f34:	dd04      	ble.n	8000f40 <MRC_drive+0x148>
 8000f36:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b31      	ldr	r3, [pc, #196]	@ (8001004 <MRC_drive+0x20c>)
 8000f3e:	801a      	strh	r2, [r3, #0]
	if (frontLeftMotorDuty  < DCMOTOR_DUTY_MIN) {frontLeftMotorDuty  = DCMOTOR_DUTY_MIN;}
 8000f40:	4b30      	ldr	r3, [pc, #192]	@ (8001004 <MRC_drive+0x20c>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	2300      	movs	r3, #0
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	da03      	bge.n	8000f54 <MRC_drive+0x15c>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b2c      	ldr	r3, [pc, #176]	@ (8001004 <MRC_drive+0x20c>)
 8000f52:	801a      	strh	r2, [r3, #0]
	if (frontRightMotorDuty > DCMOTOR_DUTY_MAX) {frontRightMotorDuty = DCMOTOR_DUTY_MAX;}
 8000f54:	4b2c      	ldr	r3, [pc, #176]	@ (8001008 <MRC_drive+0x210>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	dd04      	ble.n	8000f6c <MRC_drive+0x174>
 8000f62:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	4b27      	ldr	r3, [pc, #156]	@ (8001008 <MRC_drive+0x210>)
 8000f6a:	801a      	strh	r2, [r3, #0]
	if (frontRightMotorDuty < DCMOTOR_DUTY_MIN) {frontRightMotorDuty = DCMOTOR_DUTY_MIN;}
 8000f6c:	4b26      	ldr	r3, [pc, #152]	@ (8001008 <MRC_drive+0x210>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	2300      	movs	r3, #0
 8000f74:	429a      	cmp	r2, r3
 8000f76:	da03      	bge.n	8000f80 <MRC_drive+0x188>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <MRC_drive+0x210>)
 8000f7e:	801a      	strh	r2, [r3, #0]

	backMotorDuty 		= (frontRightMotorDuty / 2) + (frontLeftMotorDuty / 2);
 8000f80:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <MRC_drive+0x210>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	085b      	lsrs	r3, r3, #1
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <MRC_drive+0x20c>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	085b      	lsrs	r3, r3, #1
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	4413      	add	r3, r2
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	4b1d      	ldr	r3, [pc, #116]	@ (800100c <MRC_drive+0x214>)
 8000f96:	801a      	strh	r2, [r3, #0]

	DCMOTOR_setDirection(&MRC_backMotor, 		MRC_direction);
 8000f98:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <MRC_drive+0x1f4>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	481c      	ldr	r0, [pc, #112]	@ (8001010 <MRC_drive+0x218>)
 8000fa0:	f7ff fe53 	bl	8000c4a <DCMOTOR_setDirection>
	DCMOTOR_setDirection(&MRC_frontMotorRight, 	MRC_direction);
 8000fa4:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <MRC_drive+0x1f4>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	481a      	ldr	r0, [pc, #104]	@ (8001014 <MRC_drive+0x21c>)
 8000fac:	f7ff fe4d 	bl	8000c4a <DCMOTOR_setDirection>
	DCMOTOR_setDirection(&MRC_frontMotorLeft, 	MRC_direction);
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <MRC_drive+0x1f4>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4818      	ldr	r0, [pc, #96]	@ (8001018 <MRC_drive+0x220>)
 8000fb8:	f7ff fe47 	bl	8000c4a <DCMOTOR_setDirection>

	DCMOTOR_setDuty(&MRC_frontMotorRight, 		frontRightMotorDuty);
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <MRC_drive+0x210>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4814      	ldr	r0, [pc, #80]	@ (8001014 <MRC_drive+0x21c>)
 8000fc4:	f7ff fe8a 	bl	8000cdc <DCMOTOR_setDuty>
	DCMOTOR_setDuty(&MRC_frontMotorLeft, 		frontLeftMotorDuty);
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <MRC_drive+0x20c>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4812      	ldr	r0, [pc, #72]	@ (8001018 <MRC_drive+0x220>)
 8000fd0:	f7ff fe84 	bl	8000cdc <DCMOTOR_setDuty>
	DCMOTOR_setDuty(&MRC_backMotor, 			backMotorDuty);
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <MRC_drive+0x214>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480d      	ldr	r0, [pc, #52]	@ (8001010 <MRC_drive+0x218>)
 8000fdc:	f7ff fe7e 	bl	8000cdc <DCMOTOR_setDuty>
};
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe8:	2000008e 	.word	0x2000008e
 8000fec:	20000080 	.word	0x20000080
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	000007e2 	.word	0x000007e2
 8000ff8:	20000084 	.word	0x20000084
 8000ffc:	20000090 	.word	0x20000090
 8001000:	3ff00000 	.word	0x3ff00000
 8001004:	2000008a 	.word	0x2000008a
 8001008:	20000088 	.word	0x20000088
 800100c:	2000008c 	.word	0x2000008c
 8001010:	20000068 	.word	0x20000068
 8001014:	20000050 	.word	0x20000050
 8001018:	20000038 	.word	0x20000038

0800101c <MRC_emergencyBrakeAllMotors>:

void MRC_emergencyBrakeAllMotors(){
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	DCMOTOR_emergencyBrake(&MRC_frontMotorRight);
 8001020:	4805      	ldr	r0, [pc, #20]	@ (8001038 <MRC_emergencyBrakeAllMotors+0x1c>)
 8001022:	f7ff fe43 	bl	8000cac <DCMOTOR_emergencyBrake>
	DCMOTOR_emergencyBrake(&MRC_frontMotorLeft);
 8001026:	4805      	ldr	r0, [pc, #20]	@ (800103c <MRC_emergencyBrakeAllMotors+0x20>)
 8001028:	f7ff fe40 	bl	8000cac <DCMOTOR_emergencyBrake>
	DCMOTOR_emergencyBrake(&MRC_backMotor);
 800102c:	4804      	ldr	r0, [pc, #16]	@ (8001040 <MRC_emergencyBrakeAllMotors+0x24>)
 800102e:	f7ff fe3d 	bl	8000cac <DCMOTOR_emergencyBrake>
};
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000050 	.word	0x20000050
 800103c:	20000038 	.word	0x20000038
 8001040:	20000068 	.word	0x20000068

08001044 <MRC_getDistance>:

uint16_t MRC_getBackMotorDuty(){
	return backMotorDuty;
}

uint8_t MRC_getDistance(){
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	return ULTRA_getDistance();
 8001048:	f000 f8e0 	bl	800120c <ULTRA_getDistance>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <ULTRA_init>:
uint16_t inputCapturedFallingCounterValue;
uint16_t echoHighCounterValue;
uint8_t captureFlag;
uint8_t distance;

void ULTRA_init(){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	inputCapturedRisingCounterValue = 0;
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <ULTRA_init+0x44>)
 800105a:	2200      	movs	r2, #0
 800105c:	801a      	strh	r2, [r3, #0]
	inputCapturedFallingCounterValue = 0;
 800105e:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <ULTRA_init+0x48>)
 8001060:	2200      	movs	r2, #0
 8001062:	801a      	strh	r2, [r3, #0]
	echoHighCounterValue = 0;
 8001064:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <ULTRA_init+0x4c>)
 8001066:	2200      	movs	r2, #0
 8001068:	801a      	strh	r2, [r3, #0]
	captureFlag = 0;
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <ULTRA_init+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
	distance = 0;
 8001070:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <ULTRA_init+0x54>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
//	TRIG
	HAL_TIM_Base_Start_IT(&htim1);
 8001076:	480d      	ldr	r0, [pc, #52]	@ (80010ac <ULTRA_init+0x58>)
 8001078:	f001 ffa8 	bl	8002fcc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 800107c:	2108      	movs	r1, #8
 800107e:	480b      	ldr	r0, [pc, #44]	@ (80010ac <ULTRA_init+0x58>)
 8001080:	f002 f910 	bl	80032a4 <HAL_TIM_PWM_Start_IT>
//	EHCO
	HAL_TIM_Base_Start_IT(&htim2);
 8001084:	480a      	ldr	r0, [pc, #40]	@ (80010b0 <ULTRA_init+0x5c>)
 8001086:	f001 ffa1 	bl	8002fcc <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800108a:	2104      	movs	r1, #4
 800108c:	4808      	ldr	r0, [pc, #32]	@ (80010b0 <ULTRA_init+0x5c>)
 800108e:	f002 fa57 	bl	8003540 <HAL_TIM_IC_Start_IT>
};
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000094 	.word	0x20000094
 800109c:	20000096 	.word	0x20000096
 80010a0:	20000098 	.word	0x20000098
 80010a4:	2000009a 	.word	0x2000009a
 80010a8:	2000009b 	.word	0x2000009b
 80010ac:	2000009c 	.word	0x2000009c
 80010b0:	200000e4 	.word	0x200000e4

080010b4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7f1b      	ldrb	r3, [r3, #28]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d171      	bne.n	80011a8 <HAL_TIM_IC_CaptureCallback+0xf4>
		if (captureFlag == 0){
 80010c4:	4b3a      	ldr	r3, [pc, #232]	@ (80011b0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d11b      	bne.n	8001104 <HAL_TIM_IC_CaptureCallback+0x50>
			inputCapturedRisingCounterValue = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 80010cc:	2104      	movs	r1, #4
 80010ce:	4839      	ldr	r0, [pc, #228]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x100>)
 80010d0:	f002 fe66 	bl	8003da0 <HAL_TIM_ReadCapturedValue>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	4b37      	ldr	r3, [pc, #220]	@ (80011b8 <HAL_TIM_IC_CaptureCallback+0x104>)
 80010da:	801a      	strh	r2, [r3, #0]
			captureFlag = 1;
 80010dc:	4b34      	ldr	r3, [pc, #208]	@ (80011b0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80010e2:	4b34      	ldr	r3, [pc, #208]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x100>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6a1a      	ldr	r2, [r3, #32]
 80010e8:	4b32      	ldr	r3, [pc, #200]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x100>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80010f0:	621a      	str	r2, [r3, #32]
 80010f2:	4b30      	ldr	r3, [pc, #192]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x100>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6a1a      	ldr	r2, [r3, #32]
 80010f8:	4b2e      	ldr	r3, [pc, #184]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x100>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f042 0220 	orr.w	r2, r2, #32
 8001100:	621a      	str	r2, [r3, #32]
			captureFlag = 0;
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
		}
	}
};
 8001102:	e051      	b.n	80011a8 <HAL_TIM_IC_CaptureCallback+0xf4>
		else if (captureFlag == 1){
 8001104:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d14d      	bne.n	80011a8 <HAL_TIM_IC_CaptureCallback+0xf4>
			inputCapturedFallingCounterValue = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 800110c:	2104      	movs	r1, #4
 800110e:	4829      	ldr	r0, [pc, #164]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001110:	f002 fe46 	bl	8003da0 <HAL_TIM_ReadCapturedValue>
 8001114:	4603      	mov	r3, r0
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b28      	ldr	r3, [pc, #160]	@ (80011bc <HAL_TIM_IC_CaptureCallback+0x108>)
 800111a:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 800111c:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x100>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	@ 0x24
			if (inputCapturedFallingCounterValue > inputCapturedRisingCounterValue){
 8001124:	4b25      	ldr	r3, [pc, #148]	@ (80011bc <HAL_TIM_IC_CaptureCallback+0x108>)
 8001126:	881a      	ldrh	r2, [r3, #0]
 8001128:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <HAL_TIM_IC_CaptureCallback+0x104>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	d908      	bls.n	8001142 <HAL_TIM_IC_CaptureCallback+0x8e>
				echoHighCounterValue = inputCapturedFallingCounterValue - inputCapturedRisingCounterValue;
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <HAL_TIM_IC_CaptureCallback+0x108>)
 8001132:	881a      	ldrh	r2, [r3, #0]
 8001134:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b20      	ldr	r3, [pc, #128]	@ (80011c0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800113e:	801a      	strh	r2, [r3, #0]
 8001140:	e00f      	b.n	8001162 <HAL_TIM_IC_CaptureCallback+0xae>
			else if (inputCapturedRisingCounterValue > inputCapturedFallingCounterValue){
 8001142:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001144:	881a      	ldrh	r2, [r3, #0]
 8001146:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <HAL_TIM_IC_CaptureCallback+0x108>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	429a      	cmp	r2, r3
 800114c:	d909      	bls.n	8001162 <HAL_TIM_IC_CaptureCallback+0xae>
				echoHighCounterValue = 0xFFFF - inputCapturedRisingCounterValue + inputCapturedFallingCounterValue;
 800114e:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <HAL_TIM_IC_CaptureCallback+0x108>)
 8001150:	881a      	ldrh	r2, [r3, #0]
 8001152:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	b29b      	uxth	r3, r3
 800115a:	3b01      	subs	r3, #1
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001160:	801a      	strh	r2, [r3, #0]
			distance = echoHighCounterValue/58;
 8001162:	4b17      	ldr	r3, [pc, #92]	@ (80011c0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	4a17      	ldr	r2, [pc, #92]	@ (80011c4 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	095b      	lsrs	r3, r3, #5
 800116e:	b29b      	uxth	r3, r3
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001174:	701a      	strb	r2, [r3, #0]
			captureFlag = 0;
 8001176:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 800117c:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x100>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6a1a      	ldr	r2, [r3, #32]
 8001182:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800118a:	621a      	str	r2, [r3, #32]
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x100>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6a12      	ldr	r2, [r2, #32]
 8001196:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x100>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x100>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0204 	bic.w	r2, r2, #4
 80011a6:	60da      	str	r2, [r3, #12]
};
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000009a 	.word	0x2000009a
 80011b4:	200000e4 	.word	0x200000e4
 80011b8:	20000094 	.word	0x20000094
 80011bc:	20000096 	.word	0x20000096
 80011c0:	20000098 	.word	0x20000098
 80011c4:	8d3dcb09 	.word	0x8d3dcb09
 80011c8:	2000009b 	.word	0x2000009b

080011cc <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1){
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <HAL_TIM_OC_DelayElapsedCallback+0x38>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10b      	bne.n	80011f6 <HAL_TIM_OC_DelayElapsedCallback+0x2a>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7f1b      	ldrb	r3, [r3, #28]
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d107      	bne.n	80011f6 <HAL_TIM_OC_DelayElapsedCallback+0x2a>
			__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC2);
 80011e6:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f042 0204 	orr.w	r2, r2, #4
 80011f4:	60da      	str	r2, [r3, #12]
		}
	}
};
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40010000 	.word	0x40010000
 8001208:	200000e4 	.word	0x200000e4

0800120c <ULTRA_getDistance>:

uint8_t ULTRA_getDistance(){
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	return distance;
 8001210:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <ULTRA_getDistance+0x14>)
 8001212:	781b      	ldrb	r3, [r3, #0]
};
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	2000009b 	.word	0x2000009b

08001224 <HW_init>:
#include "hw.h"

//Declared at uart.c
//Declared Externally for initialize

void HW_init(){
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	MRC_BT_init();
 8001228:	f7ff fc8e 	bl	8000b48 <MRC_BT_init>
	MRC_init();
 800122c:	f7ff fd80 	bl	8000d30 <MRC_init>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <HW_abs>:

uint32_t millis(void){
	return HAL_GetTick();
};

uint32_t HW_abs(uint32_t x, uint32_t y){
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
	if (x >= y) return x - y;
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d303      	bcc.n	800124e <HW_abs+0x1a>
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	e002      	b.n	8001254 <HW_abs+0x20>
	else 		return y - x;
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	1ad3      	subs	r3, r2, r3
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	@ 0x28
 8001264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b3b      	ldr	r3, [pc, #236]	@ (8001368 <MX_GPIO_Init+0x108>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a3a      	ldr	r2, [pc, #232]	@ (8001368 <MX_GPIO_Init+0x108>)
 8001280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b38      	ldr	r3, [pc, #224]	@ (8001368 <MX_GPIO_Init+0x108>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b34      	ldr	r3, [pc, #208]	@ (8001368 <MX_GPIO_Init+0x108>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a33      	ldr	r2, [pc, #204]	@ (8001368 <MX_GPIO_Init+0x108>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b31      	ldr	r3, [pc, #196]	@ (8001368 <MX_GPIO_Init+0x108>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001368 <MX_GPIO_Init+0x108>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001368 <MX_GPIO_Init+0x108>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b2a      	ldr	r3, [pc, #168]	@ (8001368 <MX_GPIO_Init+0x108>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b26      	ldr	r3, [pc, #152]	@ (8001368 <MX_GPIO_Init+0x108>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a25      	ldr	r2, [pc, #148]	@ (8001368 <MX_GPIO_Init+0x108>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b23      	ldr	r3, [pc, #140]	@ (8001368 <MX_GPIO_Init+0x108>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FRONT_L_IN1_Pin|FRONT_R_IN2_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80012ec:	481f      	ldr	r0, [pc, #124]	@ (800136c <MX_GPIO_Init+0x10c>)
 80012ee:	f001 f96b 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BACK_IN1_Pin|BACK_IN2_Pin|FRONT_L_IN2_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80012f8:	481d      	ldr	r0, [pc, #116]	@ (8001370 <MX_GPIO_Init+0x110>)
 80012fa:	f001 f965 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRONT_R_IN1_GPIO_Port, FRONT_R_IN1_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2180      	movs	r1, #128	@ 0x80
 8001302:	481c      	ldr	r0, [pc, #112]	@ (8001374 <MX_GPIO_Init+0x114>)
 8001304:	f001 f960 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FRONT_L_IN1_Pin|FRONT_R_IN2_Pin;
 8001308:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4812      	ldr	r0, [pc, #72]	@ (800136c <MX_GPIO_Init+0x10c>)
 8001322:	f000 ffcd 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BACK_IN1_Pin|BACK_IN2_Pin|FRONT_L_IN2_Pin;
 8001326:	f44f 638a 	mov.w	r3, #1104	@ 0x450
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	480c      	ldr	r0, [pc, #48]	@ (8001370 <MX_GPIO_Init+0x110>)
 8001340:	f000 ffbe 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FRONT_R_IN1_Pin;
 8001344:	2380      	movs	r3, #128	@ 0x80
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FRONT_R_IN1_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	@ (8001374 <MX_GPIO_Init+0x114>)
 800135c:	f000 ffb0 	bl	80022c0 <HAL_GPIO_Init>

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	@ 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	40020800 	.word	0x40020800

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137c:	f000 fd66 	bl	8001e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001380:	f000 f814 	bl	80013ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001384:	f7ff ff6c 	bl	8001260 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001388:	f000 fc36 	bl	8001bf8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800138c:	f000 fc5e 	bl	8001c4c <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8001390:	f000 f9b8 	bl	8001704 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001394:	f000 fa08 	bl	80017a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001398:	f000 fa94 	bl	80018c4 <MX_TIM4_Init>
  MX_TIM1_Init();
 800139c:	f000 f910 	bl	80015c0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  AP_setup();
 80013a0:	f7ff fb98 	bl	8000ad4 <AP_setup>
  AP_loop();
 80013a4:	f7ff fba2 	bl	8000aec <AP_loop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <main+0x30>

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b094      	sub	sp, #80	@ 0x50
 80013b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	2230      	movs	r2, #48	@ 0x30
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f004 fa64 	bl	8005888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	4b27      	ldr	r3, [pc, #156]	@ (8001474 <SystemClock_Config+0xc8>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	4a26      	ldr	r2, [pc, #152]	@ (8001474 <SystemClock_Config+0xc8>)
 80013da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013de:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e0:	4b24      	ldr	r3, [pc, #144]	@ (8001474 <SystemClock_Config+0xc8>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <SystemClock_Config+0xcc>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a20      	ldr	r2, [pc, #128]	@ (8001478 <SystemClock_Config+0xcc>)
 80013f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <SystemClock_Config+0xcc>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001408:	2301      	movs	r3, #1
 800140a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800140c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001412:	2302      	movs	r3, #2
 8001414:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001416:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800141a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800141c:	2304      	movs	r3, #4
 800141e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001420:	2364      	movs	r3, #100	@ 0x64
 8001422:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001424:	2302      	movs	r3, #2
 8001426:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001428:	2304      	movs	r3, #4
 800142a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142c:	f107 0320 	add.w	r3, r7, #32
 8001430:	4618      	mov	r0, r3
 8001432:	f001 f8e3 	bl	80025fc <HAL_RCC_OscConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800143c:	f000 f81e 	bl	800147c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001440:	230f      	movs	r3, #15
 8001442:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001444:	2302      	movs	r3, #2
 8001446:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800144c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001450:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2103      	movs	r1, #3
 800145c:	4618      	mov	r0, r3
 800145e:	f001 fb45 	bl	8002aec <HAL_RCC_ClockConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001468:	f000 f808 	bl	800147c <Error_Handler>
  }
}
 800146c:	bf00      	nop
 800146e:	3750      	adds	r7, #80	@ 0x50
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	40007000 	.word	0x40007000

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001480:	b672      	cpsid	i
}
 8001482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <Error_Handler+0x8>

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <HAL_MspInit+0x4c>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001496:	4a0f      	ldr	r2, [pc, #60]	@ (80014d4 <HAL_MspInit+0x4c>)
 8001498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149c:	6453      	str	r3, [r2, #68]	@ 0x44
 800149e:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <HAL_MspInit+0x4c>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_MspInit+0x4c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	4a08      	ldr	r2, [pc, #32]	@ (80014d4 <HAL_MspInit+0x4c>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_MspInit+0x4c>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <NMI_Handler+0x4>

080014e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <MemManage_Handler+0x4>

080014f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <BusFault_Handler+0x4>

080014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <UsageFault_Handler+0x4>

08001500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152e:	f000 fcdf 	bl	8001ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800153c:	4802      	ldr	r0, [pc, #8]	@ (8001548 <TIM1_CC_IRQHandler+0x10>)
 800153e:	f002 f919 	bl	8003774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000009c 	.word	0x2000009c

0800154c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <TIM2_IRQHandler+0x10>)
 8001552:	f002 f90f 	bl	8003774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200000e4 	.word	0x200000e4

08001560 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001564:	4802      	ldr	r0, [pc, #8]	@ (8001570 <TIM4_IRQHandler+0x10>)
 8001566:	f002 f905 	bl	8003774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000174 	.word	0x20000174

08001574 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001578:	4802      	ldr	r0, [pc, #8]	@ (8001584 <USART2_IRQHandler+0x10>)
 800157a:	f003 fa65 	bl	8004a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200001bc 	.word	0x200001bc

08001588 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800158c:	4802      	ldr	r0, [pc, #8]	@ (8001598 <USART6_IRQHandler+0x10>)
 800158e:	f003 fa5b 	bl	8004a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000204 	.word	0x20000204

0800159c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <SystemInit+0x20>)
 80015a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015a6:	4a05      	ldr	r2, [pc, #20]	@ (80015bc <SystemInit+0x20>)
 80015a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b096      	sub	sp, #88	@ 0x58
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]
 80015ee:	615a      	str	r2, [r3, #20]
 80015f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	2220      	movs	r2, #32
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 f945 	bl	8005888 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015fe:	4b3f      	ldr	r3, [pc, #252]	@ (80016fc <MX_TIM1_Init+0x13c>)
 8001600:	4a3f      	ldr	r2, [pc, #252]	@ (8001700 <MX_TIM1_Init+0x140>)
 8001602:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000 - 1;
 8001604:	4b3d      	ldr	r3, [pc, #244]	@ (80016fc <MX_TIM1_Init+0x13c>)
 8001606:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800160a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160c:	4b3b      	ldr	r3, [pc, #236]	@ (80016fc <MX_TIM1_Init+0x13c>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000 - 1;
 8001612:	4b3a      	ldr	r3, [pc, #232]	@ (80016fc <MX_TIM1_Init+0x13c>)
 8001614:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001618:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161a:	4b38      	ldr	r3, [pc, #224]	@ (80016fc <MX_TIM1_Init+0x13c>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001620:	4b36      	ldr	r3, [pc, #216]	@ (80016fc <MX_TIM1_Init+0x13c>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001626:	4b35      	ldr	r3, [pc, #212]	@ (80016fc <MX_TIM1_Init+0x13c>)
 8001628:	2280      	movs	r2, #128	@ 0x80
 800162a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800162c:	4833      	ldr	r0, [pc, #204]	@ (80016fc <MX_TIM1_Init+0x13c>)
 800162e:	f001 fc7d 	bl	8002f2c <HAL_TIM_Base_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001638:	f7ff ff20 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001640:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001642:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001646:	4619      	mov	r1, r3
 8001648:	482c      	ldr	r0, [pc, #176]	@ (80016fc <MX_TIM1_Init+0x13c>)
 800164a:	f002 fae1 	bl	8003c10 <HAL_TIM_ConfigClockSource>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001654:	f7ff ff12 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001658:	4828      	ldr	r0, [pc, #160]	@ (80016fc <MX_TIM1_Init+0x13c>)
 800165a:	f001 fd19 	bl	8003090 <HAL_TIM_PWM_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001664:	f7ff ff0a 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001668:	2300      	movs	r3, #0
 800166a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001670:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001674:	4619      	mov	r1, r3
 8001676:	4821      	ldr	r0, [pc, #132]	@ (80016fc <MX_TIM1_Init+0x13c>)
 8001678:	f002 ffea 	bl	8004650 <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001682:	f7ff fefb 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001686:	2360      	movs	r3, #96	@ 0x60
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1;
 800168a:	2301      	movs	r3, #1
 800168c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168e:	2300      	movs	r3, #0
 8001690:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001692:	2300      	movs	r3, #0
 8001694:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a6:	2208      	movs	r2, #8
 80016a8:	4619      	mov	r1, r3
 80016aa:	4814      	ldr	r0, [pc, #80]	@ (80016fc <MX_TIM1_Init+0x13c>)
 80016ac:	f002 f9ee 	bl	8003a8c <HAL_TIM_PWM_ConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80016b6:	f7ff fee1 	bl	800147c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	4807      	ldr	r0, [pc, #28]	@ (80016fc <MX_TIM1_Init+0x13c>)
 80016de:	f003 f825 	bl	800472c <HAL_TIMEx_ConfigBreakDeadTime>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80016e8:	f7ff fec8 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016ec:	4803      	ldr	r0, [pc, #12]	@ (80016fc <MX_TIM1_Init+0x13c>)
 80016ee:	f000 f9e1 	bl	8001ab4 <HAL_TIM_MspPostInit>

}
 80016f2:	bf00      	nop
 80016f4:	3758      	adds	r7, #88	@ 0x58
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000009c 	.word	0x2000009c
 8001700:	40010000 	.word	0x40010000

08001704 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001714:	463b      	mov	r3, r7
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001720:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <MX_TIM2_Init+0xa0>)
 8001722:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001726:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 8001728:	4b1e      	ldr	r3, [pc, #120]	@ (80017a4 <MX_TIM2_Init+0xa0>)
 800172a:	2263      	movs	r2, #99	@ 0x63
 800172c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172e:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <MX_TIM2_Init+0xa0>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001734:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <MX_TIM2_Init+0xa0>)
 8001736:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800173a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173c:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <MX_TIM2_Init+0xa0>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001742:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <MX_TIM2_Init+0xa0>)
 8001744:	2280      	movs	r2, #128	@ 0x80
 8001746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001748:	4816      	ldr	r0, [pc, #88]	@ (80017a4 <MX_TIM2_Init+0xa0>)
 800174a:	f001 fea9 	bl	80034a0 <HAL_TIM_IC_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001754:	f7ff fe92 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4619      	mov	r1, r3
 8001766:	480f      	ldr	r0, [pc, #60]	@ (80017a4 <MX_TIM2_Init+0xa0>)
 8001768:	f002 ff72 	bl	8004650 <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001772:	f7ff fe83 	bl	800147c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800177a:	2301      	movs	r3, #1
 800177c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001786:	463b      	mov	r3, r7
 8001788:	2204      	movs	r2, #4
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_TIM2_Init+0xa0>)
 800178e:	f002 f8e1 	bl	8003954 <HAL_TIM_IC_ConfigChannel>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001798:	f7ff fe70 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200000e4 	.word	0x200000e4

080017a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08e      	sub	sp, #56	@ 0x38
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017bc:	f107 0320 	add.w	r3, r7, #32
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
 80017d4:	615a      	str	r2, [r3, #20]
 80017d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017d8:	4b38      	ldr	r3, [pc, #224]	@ (80018bc <MX_TIM3_Init+0x114>)
 80017da:	4a39      	ldr	r2, [pc, #228]	@ (80018c0 <MX_TIM3_Init+0x118>)
 80017dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 243;
 80017de:	4b37      	ldr	r3, [pc, #220]	@ (80018bc <MX_TIM3_Init+0x114>)
 80017e0:	22f3      	movs	r2, #243	@ 0xf3
 80017e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e4:	4b35      	ldr	r3, [pc, #212]	@ (80018bc <MX_TIM3_Init+0x114>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 80017ea:	4b34      	ldr	r3, [pc, #208]	@ (80018bc <MX_TIM3_Init+0x114>)
 80017ec:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80017f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f2:	4b32      	ldr	r3, [pc, #200]	@ (80018bc <MX_TIM3_Init+0x114>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017f8:	4b30      	ldr	r3, [pc, #192]	@ (80018bc <MX_TIM3_Init+0x114>)
 80017fa:	2280      	movs	r2, #128	@ 0x80
 80017fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017fe:	482f      	ldr	r0, [pc, #188]	@ (80018bc <MX_TIM3_Init+0x114>)
 8001800:	f001 fb94 	bl	8002f2c <HAL_TIM_Base_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800180a:	f7ff fe37 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001812:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001814:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001818:	4619      	mov	r1, r3
 800181a:	4828      	ldr	r0, [pc, #160]	@ (80018bc <MX_TIM3_Init+0x114>)
 800181c:	f002 f9f8 	bl	8003c10 <HAL_TIM_ConfigClockSource>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001826:	f7ff fe29 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800182a:	4824      	ldr	r0, [pc, #144]	@ (80018bc <MX_TIM3_Init+0x114>)
 800182c:	f001 fc30 	bl	8003090 <HAL_TIM_PWM_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001836:	f7ff fe21 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001842:	f107 0320 	add.w	r3, r7, #32
 8001846:	4619      	mov	r1, r3
 8001848:	481c      	ldr	r0, [pc, #112]	@ (80018bc <MX_TIM3_Init+0x114>)
 800184a:	f002 ff01 	bl	8004650 <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001854:	f7ff fe12 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001858:	2360      	movs	r3, #96	@ 0x60
 800185a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2048;
 800185c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001860:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	4619      	mov	r1, r3
 8001870:	4812      	ldr	r0, [pc, #72]	@ (80018bc <MX_TIM3_Init+0x114>)
 8001872:	f002 f90b 	bl	8003a8c <HAL_TIM_PWM_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800187c:	f7ff fdfe 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2204      	movs	r2, #4
 8001884:	4619      	mov	r1, r3
 8001886:	480d      	ldr	r0, [pc, #52]	@ (80018bc <MX_TIM3_Init+0x114>)
 8001888:	f002 f900 	bl	8003a8c <HAL_TIM_PWM_ConfigChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001892:	f7ff fdf3 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	2208      	movs	r2, #8
 800189a:	4619      	mov	r1, r3
 800189c:	4807      	ldr	r0, [pc, #28]	@ (80018bc <MX_TIM3_Init+0x114>)
 800189e:	f002 f8f5 	bl	8003a8c <HAL_TIM_PWM_ConfigChannel>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80018a8:	f7ff fde8 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018ac:	4803      	ldr	r0, [pc, #12]	@ (80018bc <MX_TIM3_Init+0x114>)
 80018ae:	f000 f901 	bl	8001ab4 <HAL_TIM_MspPostInit>

}
 80018b2:	bf00      	nop
 80018b4:	3738      	adds	r7, #56	@ 0x38
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000012c 	.word	0x2000012c
 80018c0:	40000400 	.word	0x40000400

080018c4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d8:	463b      	mov	r3, r7
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <MX_TIM4_Init+0x94>)
 80018e2:	4a1e      	ldr	r2, [pc, #120]	@ (800195c <MX_TIM4_Init+0x98>)
 80018e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100 - 1;
 80018e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <MX_TIM4_Init+0x94>)
 80018e8:	2263      	movs	r2, #99	@ 0x63
 80018ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <MX_TIM4_Init+0x94>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018f2:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <MX_TIM4_Init+0x94>)
 80018f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fa:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <MX_TIM4_Init+0x94>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001900:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <MX_TIM4_Init+0x94>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001906:	4814      	ldr	r0, [pc, #80]	@ (8001958 <MX_TIM4_Init+0x94>)
 8001908:	f001 fb10 	bl	8002f2c <HAL_TIM_Base_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001912:	f7ff fdb3 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001916:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800191a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800191c:	f107 0308 	add.w	r3, r7, #8
 8001920:	4619      	mov	r1, r3
 8001922:	480d      	ldr	r0, [pc, #52]	@ (8001958 <MX_TIM4_Init+0x94>)
 8001924:	f002 f974 	bl	8003c10 <HAL_TIM_ConfigClockSource>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800192e:	f7ff fda5 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800193a:	463b      	mov	r3, r7
 800193c:	4619      	mov	r1, r3
 800193e:	4806      	ldr	r0, [pc, #24]	@ (8001958 <MX_TIM4_Init+0x94>)
 8001940:	f002 fe86 	bl	8004650 <HAL_TIMEx_MasterConfigSynchronization>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800194a:	f7ff fd97 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000174 	.word	0x20000174
 800195c:	40000800 	.word	0x40000800

08001960 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a26      	ldr	r2, [pc, #152]	@ (8001a08 <HAL_TIM_Base_MspInit+0xa8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d116      	bne.n	80019a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	4b25      	ldr	r3, [pc, #148]	@ (8001a0c <HAL_TIM_Base_MspInit+0xac>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	4a24      	ldr	r2, [pc, #144]	@ (8001a0c <HAL_TIM_Base_MspInit+0xac>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6453      	str	r3, [r2, #68]	@ 0x44
 8001982:	4b22      	ldr	r3, [pc, #136]	@ (8001a0c <HAL_TIM_Base_MspInit+0xac>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	201b      	movs	r0, #27
 8001994:	f000 fbcb 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001998:	201b      	movs	r0, #27
 800199a:	f000 fbe4 	bl	8002166 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800199e:	e02e      	b.n	80019fe <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a10 <HAL_TIM_Base_MspInit+0xb0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d10e      	bne.n	80019c8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <HAL_TIM_Base_MspInit+0xac>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	4a16      	ldr	r2, [pc, #88]	@ (8001a0c <HAL_TIM_Base_MspInit+0xac>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ba:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <HAL_TIM_Base_MspInit+0xac>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]
}
 80019c6:	e01a      	b.n	80019fe <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a11      	ldr	r2, [pc, #68]	@ (8001a14 <HAL_TIM_Base_MspInit+0xb4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d115      	bne.n	80019fe <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a0c <HAL_TIM_Base_MspInit+0xac>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	4a0c      	ldr	r2, [pc, #48]	@ (8001a0c <HAL_TIM_Base_MspInit+0xac>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <HAL_TIM_Base_MspInit+0xac>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	201e      	movs	r0, #30
 80019f4:	f000 fb9b 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019f8:	201e      	movs	r0, #30
 80019fa:	f000 fbb4 	bl	8002166 <HAL_NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40010000 	.word	0x40010000
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40000400 	.word	0x40000400
 8001a14:	40000800 	.word	0x40000800

08001a18 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	@ 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a38:	d133      	bne.n	8001aa2 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <HAL_TIM_IC_MspInit+0x94>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	4a1a      	ldr	r2, [pc, #104]	@ (8001aac <HAL_TIM_IC_MspInit+0x94>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4a:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <HAL_TIM_IC_MspInit+0x94>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <HAL_TIM_IC_MspInit+0x94>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a13      	ldr	r2, [pc, #76]	@ (8001aac <HAL_TIM_IC_MspInit+0x94>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <HAL_TIM_IC_MspInit+0x94>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8001a72:	2308      	movs	r3, #8
 8001a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a82:	2301      	movs	r3, #1
 8001a84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4808      	ldr	r0, [pc, #32]	@ (8001ab0 <HAL_TIM_IC_MspInit+0x98>)
 8001a8e:	f000 fc17 	bl	80022c0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	201c      	movs	r0, #28
 8001a98:	f000 fb49 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a9c:	201c      	movs	r0, #28
 8001a9e:	f000 fb62 	bl	8002166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	3728      	adds	r7, #40	@ 0x28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020400 	.word	0x40020400

08001ab4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08c      	sub	sp, #48	@ 0x30
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a43      	ldr	r2, [pc, #268]	@ (8001be0 <HAL_TIM_MspPostInit+0x12c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d11f      	bne.n	8001b16 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	4b42      	ldr	r3, [pc, #264]	@ (8001be4 <HAL_TIM_MspPostInit+0x130>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a41      	ldr	r2, [pc, #260]	@ (8001be4 <HAL_TIM_MspPostInit+0x130>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8001be4 <HAL_TIM_MspPostInit+0x130>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TRIG_Pin;
 8001af2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4836      	ldr	r0, [pc, #216]	@ (8001be8 <HAL_TIM_MspPostInit+0x134>)
 8001b10:	f000 fbd6 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b14:	e05f      	b.n	8001bd6 <HAL_TIM_MspPostInit+0x122>
  else if(timHandle->Instance==TIM3)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a34      	ldr	r2, [pc, #208]	@ (8001bec <HAL_TIM_MspPostInit+0x138>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d15a      	bne.n	8001bd6 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	4b2f      	ldr	r3, [pc, #188]	@ (8001be4 <HAL_TIM_MspPostInit+0x130>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b28:	4a2e      	ldr	r2, [pc, #184]	@ (8001be4 <HAL_TIM_MspPostInit+0x130>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b30:	4b2c      	ldr	r3, [pc, #176]	@ (8001be4 <HAL_TIM_MspPostInit+0x130>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	4b28      	ldr	r3, [pc, #160]	@ (8001be4 <HAL_TIM_MspPostInit+0x130>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b44:	4a27      	ldr	r2, [pc, #156]	@ (8001be4 <HAL_TIM_MspPostInit+0x130>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4c:	4b25      	ldr	r3, [pc, #148]	@ (8001be4 <HAL_TIM_MspPostInit+0x130>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	4b21      	ldr	r3, [pc, #132]	@ (8001be4 <HAL_TIM_MspPostInit+0x130>)
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b60:	4a20      	ldr	r2, [pc, #128]	@ (8001be4 <HAL_TIM_MspPostInit+0x130>)
 8001b62:	f043 0302 	orr.w	r3, r3, #2
 8001b66:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b68:	4b1e      	ldr	r3, [pc, #120]	@ (8001be4 <HAL_TIM_MspPostInit+0x130>)
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BACK_EN_Pin;
 8001b74:	2340      	movs	r3, #64	@ 0x40
 8001b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b84:	2302      	movs	r3, #2
 8001b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BACK_EN_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4816      	ldr	r0, [pc, #88]	@ (8001be8 <HAL_TIM_MspPostInit+0x134>)
 8001b90:	f000 fb96 	bl	80022c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FRONT_L_EN_Pin;
 8001b94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(FRONT_L_EN_GPIO_Port, &GPIO_InitStruct);
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	4619      	mov	r1, r3
 8001bb0:	480f      	ldr	r0, [pc, #60]	@ (8001bf0 <HAL_TIM_MspPostInit+0x13c>)
 8001bb2:	f000 fb85 	bl	80022c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FRONT_R_EN_Pin;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(FRONT_R_EN_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4808      	ldr	r0, [pc, #32]	@ (8001bf4 <HAL_TIM_MspPostInit+0x140>)
 8001bd2:	f000 fb75 	bl	80022c0 <HAL_GPIO_Init>
}
 8001bd6:	bf00      	nop
 8001bd8:	3730      	adds	r7, #48	@ 0x30
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40010000 	.word	0x40010000
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40000400 	.word	0x40000400
 8001bf0:	40020800 	.word	0x40020800
 8001bf4:	40020400 	.word	0x40020400

08001bf8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	@ (8001c48 <MX_USART2_UART_Init+0x50>)
 8001c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c1c:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001c1e:	220c      	movs	r2, #12
 8001c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c22:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c28:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c2e:	4805      	ldr	r0, [pc, #20]	@ (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001c30:	f002 fde2 	bl	80047f8 <HAL_UART_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c3a:	f7ff fc1f 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200001bc 	.word	0x200001bc
 8001c48:	40004400 	.word	0x40004400

08001c4c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <MX_USART6_UART_Init+0x4c>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	@ (8001c9c <MX_USART6_UART_Init+0x50>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c56:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <MX_USART6_UART_Init+0x4c>)
 8001c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c5c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <MX_USART6_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <MX_USART6_UART_Init+0x4c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <MX_USART6_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c70:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <MX_USART6_UART_Init+0x4c>)
 8001c72:	220c      	movs	r2, #12
 8001c74:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <MX_USART6_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <MX_USART6_UART_Init+0x4c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	@ (8001c98 <MX_USART6_UART_Init+0x4c>)
 8001c84:	f002 fdb8 	bl	80047f8 <HAL_UART_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c8e:	f7ff fbf5 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000204 	.word	0x20000204
 8001c9c:	40011400 	.word	0x40011400

08001ca0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08c      	sub	sp, #48	@ 0x30
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a49      	ldr	r2, [pc, #292]	@ (8001de4 <HAL_UART_MspInit+0x144>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d134      	bne.n	8001d2c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	4b48      	ldr	r3, [pc, #288]	@ (8001de8 <HAL_UART_MspInit+0x148>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	4a47      	ldr	r2, [pc, #284]	@ (8001de8 <HAL_UART_MspInit+0x148>)
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd2:	4b45      	ldr	r3, [pc, #276]	@ (8001de8 <HAL_UART_MspInit+0x148>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	4b41      	ldr	r3, [pc, #260]	@ (8001de8 <HAL_UART_MspInit+0x148>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4a40      	ldr	r2, [pc, #256]	@ (8001de8 <HAL_UART_MspInit+0x148>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cee:	4b3e      	ldr	r3, [pc, #248]	@ (8001de8 <HAL_UART_MspInit+0x148>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8001cfa:	230c      	movs	r3, #12
 8001cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	4835      	ldr	r0, [pc, #212]	@ (8001dec <HAL_UART_MspInit+0x14c>)
 8001d16:	f000 fad3 	bl	80022c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	2026      	movs	r0, #38	@ 0x26
 8001d20:	f000 fa05 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d24:	2026      	movs	r0, #38	@ 0x26
 8001d26:	f000 fa1e 	bl	8002166 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001d2a:	e057      	b.n	8001ddc <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART6)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a2f      	ldr	r2, [pc, #188]	@ (8001df0 <HAL_UART_MspInit+0x150>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d152      	bne.n	8001ddc <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001de8 <HAL_UART_MspInit+0x148>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8001de8 <HAL_UART_MspInit+0x148>)
 8001d40:	f043 0320 	orr.w	r3, r3, #32
 8001d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d46:	4b28      	ldr	r3, [pc, #160]	@ (8001de8 <HAL_UART_MspInit+0x148>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	4b24      	ldr	r3, [pc, #144]	@ (8001de8 <HAL_UART_MspInit+0x148>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	4a23      	ldr	r2, [pc, #140]	@ (8001de8 <HAL_UART_MspInit+0x148>)
 8001d5c:	f043 0304 	orr.w	r3, r3, #4
 8001d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d62:	4b21      	ldr	r3, [pc, #132]	@ (8001de8 <HAL_UART_MspInit+0x148>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	4b1d      	ldr	r3, [pc, #116]	@ (8001de8 <HAL_UART_MspInit+0x148>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	4a1c      	ldr	r2, [pc, #112]	@ (8001de8 <HAL_UART_MspInit+0x148>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <HAL_UART_MspInit+0x148>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BT_STX_Pin;
 8001d8a:	2340      	movs	r3, #64	@ 0x40
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d96:	2303      	movs	r3, #3
 8001d98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d9a:	2308      	movs	r3, #8
 8001d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BT_STX_GPIO_Port, &GPIO_InitStruct);
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	4619      	mov	r1, r3
 8001da4:	4813      	ldr	r0, [pc, #76]	@ (8001df4 <HAL_UART_MspInit+0x154>)
 8001da6:	f000 fa8b 	bl	80022c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BT_SRX_Pin;
 8001daa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BT_SRX_GPIO_Port, &GPIO_InitStruct);
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4809      	ldr	r0, [pc, #36]	@ (8001dec <HAL_UART_MspInit+0x14c>)
 8001dc8:	f000 fa7a 	bl	80022c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2047      	movs	r0, #71	@ 0x47
 8001dd2:	f000 f9ac 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001dd6:	2047      	movs	r0, #71	@ 0x47
 8001dd8:	f000 f9c5 	bl	8002166 <HAL_NVIC_EnableIRQ>
}
 8001ddc:	bf00      	nop
 8001dde:	3730      	adds	r7, #48	@ 0x30
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40004400 	.word	0x40004400
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40011400 	.word	0x40011400
 8001df4:	40020800 	.word	0x40020800

08001df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001df8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dfc:	f7ff fbce 	bl	800159c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e00:	480c      	ldr	r0, [pc, #48]	@ (8001e34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e02:	490d      	ldr	r1, [pc, #52]	@ (8001e38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e04:	4a0d      	ldr	r2, [pc, #52]	@ (8001e3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e16:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e18:	4c0a      	ldr	r4, [pc, #40]	@ (8001e44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e26:	f003 fd37 	bl	8005898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2a:	f7ff faa5 	bl	8001378 <main>
  bx  lr    
 8001e2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e3c:	08005920 	.word	0x08005920
  ldr r2, =_sbss
 8001e40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e44:	20000250 	.word	0x20000250

08001e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e50:	4b0e      	ldr	r3, [pc, #56]	@ (8001e8c <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0d      	ldr	r2, [pc, #52]	@ (8001e8c <HAL_Init+0x40>)
 8001e56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	@ (8001e8c <HAL_Init+0x40>)
 8001e62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	@ (8001e8c <HAL_Init+0x40>)
 8001e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 f94f 	bl	8002118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7a:	200f      	movs	r0, #15
 8001e7c:	f000 f808 	bl	8001e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff fb02 	bl	8001488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023c00 	.word	0x40023c00

08001e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e98:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <HAL_InitTick+0x54>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_InitTick+0x58>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f967 	bl	8002182 <HAL_SYSTICK_Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00e      	b.n	8001edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	d80a      	bhi.n	8001eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f000 f92f 	bl	800212e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed0:	4a06      	ldr	r2, [pc, #24]	@ (8001eec <HAL_InitTick+0x5c>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	20000004 	.word	0x20000004

08001ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_IncTick+0x20>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_IncTick+0x24>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	@ (8001f14 <HAL_IncTick+0x24>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000008 	.word	0x20000008
 8001f14:	2000024c 	.word	0x2000024c

08001f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	@ (8001f2c <HAL_GetTick+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	2000024c 	.word	0x2000024c

08001f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff ffee 	bl	8001f18 <HAL_GetTick>
 8001f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d005      	beq.n	8001f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <HAL_Delay+0x44>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f56:	bf00      	nop
 8001f58:	f7ff ffde 	bl	8001f18 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d8f7      	bhi.n	8001f58 <HAL_Delay+0x28>
  {
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000008 	.word	0x20000008

08001f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001faa:	4a04      	ldr	r2, [pc, #16]	@ (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0307 	and.w	r3, r3, #7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db0b      	blt.n	8002006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f003 021f 	and.w	r2, r3, #31
 8001ff4:	4907      	ldr	r1, [pc, #28]	@ (8002014 <__NVIC_EnableIRQ+0x38>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e100 	.word	0xe000e100

08002018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	2b00      	cmp	r3, #0
 800202a:	db0a      	blt.n	8002042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	490c      	ldr	r1, [pc, #48]	@ (8002064 <__NVIC_SetPriority+0x4c>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	440b      	add	r3, r1
 800203c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002040:	e00a      	b.n	8002058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4908      	ldr	r1, [pc, #32]	@ (8002068 <__NVIC_SetPriority+0x50>)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	3b04      	subs	r3, #4
 8002050:	0112      	lsls	r2, r2, #4
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	440b      	add	r3, r1
 8002056:	761a      	strb	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	@ 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f1c3 0307 	rsb	r3, r3, #7
 8002086:	2b04      	cmp	r3, #4
 8002088:	bf28      	it	cs
 800208a:	2304      	movcs	r3, #4
 800208c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3304      	adds	r3, #4
 8002092:	2b06      	cmp	r3, #6
 8002094:	d902      	bls.n	800209c <NVIC_EncodePriority+0x30>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3b03      	subs	r3, #3
 800209a:	e000      	b.n	800209e <NVIC_EncodePriority+0x32>
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43d9      	mvns	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	4313      	orrs	r3, r2
         );
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	@ 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020e4:	d301      	bcc.n	80020ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00f      	b.n	800210a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <SysTick_Config+0x40>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f2:	210f      	movs	r1, #15
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f7ff ff8e 	bl	8002018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020fc:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <SysTick_Config+0x40>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002102:	4b04      	ldr	r3, [pc, #16]	@ (8002114 <SysTick_Config+0x40>)
 8002104:	2207      	movs	r2, #7
 8002106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	e000e010 	.word	0xe000e010

08002118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff29 	bl	8001f78 <__NVIC_SetPriorityGrouping>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002140:	f7ff ff3e 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 8002144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f7ff ff8e 	bl	800206c <NVIC_EncodePriority>
 8002150:	4602      	mov	r2, r0
 8002152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff5d 	bl	8002018 <__NVIC_SetPriority>
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff31 	bl	8001fdc <__NVIC_EnableIRQ>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ffa2 	bl	80020d4 <SysTick_Config>
 8002190:	4603      	mov	r3, r0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021a8:	f7ff feb6 	bl	8001f18 <HAL_GetTick>
 80021ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d008      	beq.n	80021cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2280      	movs	r2, #128	@ 0x80
 80021be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e052      	b.n	8002272 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0216 	bic.w	r2, r2, #22
 80021da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695a      	ldr	r2, [r3, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d103      	bne.n	80021fc <HAL_DMA_Abort+0x62>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0208 	bic.w	r2, r2, #8
 800220a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800221c:	e013      	b.n	8002246 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800221e:	f7ff fe7b 	bl	8001f18 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b05      	cmp	r3, #5
 800222a:	d90c      	bls.n	8002246 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2203      	movs	r2, #3
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e015      	b.n	8002272 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1e4      	bne.n	800221e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002258:	223f      	movs	r2, #63	@ 0x3f
 800225a:	409a      	lsls	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d004      	beq.n	8002298 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2280      	movs	r2, #128	@ 0x80
 8002292:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e00c      	b.n	80022b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2205      	movs	r2, #5
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0201 	bic.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	@ 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	e159      	b.n	8002590 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022dc:	2201      	movs	r2, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	f040 8148 	bne.w	800258a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d005      	beq.n	8002312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230e:	2b02      	cmp	r3, #2
 8002310:	d130      	bne.n	8002374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 0201 	and.w	r2, r3, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b03      	cmp	r3, #3
 800237e:	d017      	beq.n	80023b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d123      	bne.n	8002404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	08da      	lsrs	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3208      	adds	r2, #8
 80023c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	220f      	movs	r2, #15
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	08da      	lsrs	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3208      	adds	r2, #8
 80023fe:	69b9      	ldr	r1, [r7, #24]
 8002400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0203 	and.w	r2, r3, #3
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80a2 	beq.w	800258a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b57      	ldr	r3, [pc, #348]	@ (80025a8 <HAL_GPIO_Init+0x2e8>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244e:	4a56      	ldr	r2, [pc, #344]	@ (80025a8 <HAL_GPIO_Init+0x2e8>)
 8002450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002454:	6453      	str	r3, [r2, #68]	@ 0x44
 8002456:	4b54      	ldr	r3, [pc, #336]	@ (80025a8 <HAL_GPIO_Init+0x2e8>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002462:	4a52      	ldr	r2, [pc, #328]	@ (80025ac <HAL_GPIO_Init+0x2ec>)
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	3302      	adds	r3, #2
 800246a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	220f      	movs	r2, #15
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a49      	ldr	r2, [pc, #292]	@ (80025b0 <HAL_GPIO_Init+0x2f0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d019      	beq.n	80024c2 <HAL_GPIO_Init+0x202>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a48      	ldr	r2, [pc, #288]	@ (80025b4 <HAL_GPIO_Init+0x2f4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d013      	beq.n	80024be <HAL_GPIO_Init+0x1fe>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a47      	ldr	r2, [pc, #284]	@ (80025b8 <HAL_GPIO_Init+0x2f8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00d      	beq.n	80024ba <HAL_GPIO_Init+0x1fa>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a46      	ldr	r2, [pc, #280]	@ (80025bc <HAL_GPIO_Init+0x2fc>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d007      	beq.n	80024b6 <HAL_GPIO_Init+0x1f6>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a45      	ldr	r2, [pc, #276]	@ (80025c0 <HAL_GPIO_Init+0x300>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_GPIO_Init+0x1f2>
 80024ae:	2304      	movs	r3, #4
 80024b0:	e008      	b.n	80024c4 <HAL_GPIO_Init+0x204>
 80024b2:	2307      	movs	r3, #7
 80024b4:	e006      	b.n	80024c4 <HAL_GPIO_Init+0x204>
 80024b6:	2303      	movs	r3, #3
 80024b8:	e004      	b.n	80024c4 <HAL_GPIO_Init+0x204>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e002      	b.n	80024c4 <HAL_GPIO_Init+0x204>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <HAL_GPIO_Init+0x204>
 80024c2:	2300      	movs	r3, #0
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	f002 0203 	and.w	r2, r2, #3
 80024ca:	0092      	lsls	r2, r2, #2
 80024cc:	4093      	lsls	r3, r2
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024d4:	4935      	ldr	r1, [pc, #212]	@ (80025ac <HAL_GPIO_Init+0x2ec>)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3302      	adds	r3, #2
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024e2:	4b38      	ldr	r3, [pc, #224]	@ (80025c4 <HAL_GPIO_Init+0x304>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002506:	4a2f      	ldr	r2, [pc, #188]	@ (80025c4 <HAL_GPIO_Init+0x304>)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800250c:	4b2d      	ldr	r3, [pc, #180]	@ (80025c4 <HAL_GPIO_Init+0x304>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002530:	4a24      	ldr	r2, [pc, #144]	@ (80025c4 <HAL_GPIO_Init+0x304>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002536:	4b23      	ldr	r3, [pc, #140]	@ (80025c4 <HAL_GPIO_Init+0x304>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800255a:	4a1a      	ldr	r2, [pc, #104]	@ (80025c4 <HAL_GPIO_Init+0x304>)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002560:	4b18      	ldr	r3, [pc, #96]	@ (80025c4 <HAL_GPIO_Init+0x304>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002584:	4a0f      	ldr	r2, [pc, #60]	@ (80025c4 <HAL_GPIO_Init+0x304>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3301      	adds	r3, #1
 800258e:	61fb      	str	r3, [r7, #28]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	2b0f      	cmp	r3, #15
 8002594:	f67f aea2 	bls.w	80022dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3724      	adds	r7, #36	@ 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40013800 	.word	0x40013800
 80025b0:	40020000 	.word	0x40020000
 80025b4:	40020400 	.word	0x40020400
 80025b8:	40020800 	.word	0x40020800
 80025bc:	40020c00 	.word	0x40020c00
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40013c00 	.word	0x40013c00

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e4:	e003      	b.n	80025ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	041a      	lsls	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	619a      	str	r2, [r3, #24]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e267      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d075      	beq.n	8002706 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800261a:	4b88      	ldr	r3, [pc, #544]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b04      	cmp	r3, #4
 8002624:	d00c      	beq.n	8002640 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002626:	4b85      	ldr	r3, [pc, #532]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262e:	2b08      	cmp	r3, #8
 8002630:	d112      	bne.n	8002658 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002632:	4b82      	ldr	r3, [pc, #520]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800263e:	d10b      	bne.n	8002658 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002640:	4b7e      	ldr	r3, [pc, #504]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d05b      	beq.n	8002704 <HAL_RCC_OscConfig+0x108>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d157      	bne.n	8002704 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e242      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002660:	d106      	bne.n	8002670 <HAL_RCC_OscConfig+0x74>
 8002662:	4b76      	ldr	r3, [pc, #472]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a75      	ldr	r2, [pc, #468]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e01d      	b.n	80026ac <HAL_RCC_OscConfig+0xb0>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002678:	d10c      	bne.n	8002694 <HAL_RCC_OscConfig+0x98>
 800267a:	4b70      	ldr	r3, [pc, #448]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a6f      	ldr	r2, [pc, #444]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	4b6d      	ldr	r3, [pc, #436]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a6c      	ldr	r2, [pc, #432]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 800268c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e00b      	b.n	80026ac <HAL_RCC_OscConfig+0xb0>
 8002694:	4b69      	ldr	r3, [pc, #420]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a68      	ldr	r2, [pc, #416]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 800269a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b66      	ldr	r3, [pc, #408]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a65      	ldr	r2, [pc, #404]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 80026a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d013      	beq.n	80026dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7ff fc30 	bl	8001f18 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026bc:	f7ff fc2c 	bl	8001f18 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	@ 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e207      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	4b5b      	ldr	r3, [pc, #364]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0xc0>
 80026da:	e014      	b.n	8002706 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7ff fc1c 	bl	8001f18 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e4:	f7ff fc18 	bl	8001f18 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	@ 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e1f3      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f6:	4b51      	ldr	r3, [pc, #324]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0xe8>
 8002702:	e000      	b.n	8002706 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d063      	beq.n	80027da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002712:	4b4a      	ldr	r3, [pc, #296]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271e:	4b47      	ldr	r3, [pc, #284]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002726:	2b08      	cmp	r3, #8
 8002728:	d11c      	bne.n	8002764 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272a:	4b44      	ldr	r3, [pc, #272]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d116      	bne.n	8002764 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002736:	4b41      	ldr	r3, [pc, #260]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <HAL_RCC_OscConfig+0x152>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d001      	beq.n	800274e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e1c7      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274e:	4b3b      	ldr	r3, [pc, #236]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4937      	ldr	r1, [pc, #220]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002762:	e03a      	b.n	80027da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d020      	beq.n	80027ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800276c:	4b34      	ldr	r3, [pc, #208]	@ (8002840 <HAL_RCC_OscConfig+0x244>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7ff fbd1 	bl	8001f18 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800277a:	f7ff fbcd 	bl	8001f18 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e1a8      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278c:	4b2b      	ldr	r3, [pc, #172]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002798:	4b28      	ldr	r3, [pc, #160]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4925      	ldr	r1, [pc, #148]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]
 80027ac:	e015      	b.n	80027da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ae:	4b24      	ldr	r3, [pc, #144]	@ (8002840 <HAL_RCC_OscConfig+0x244>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7ff fbb0 	bl	8001f18 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027bc:	f7ff fbac 	bl	8001f18 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e187      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ce:	4b1b      	ldr	r3, [pc, #108]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d036      	beq.n	8002854 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d016      	beq.n	800281c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ee:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <HAL_RCC_OscConfig+0x248>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7ff fb90 	bl	8001f18 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027fc:	f7ff fb8c 	bl	8001f18 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e167      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280e:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x200>
 800281a:	e01b      	b.n	8002854 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800281c:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <HAL_RCC_OscConfig+0x248>)
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002822:	f7ff fb79 	bl	8001f18 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002828:	e00e      	b.n	8002848 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282a:	f7ff fb75 	bl	8001f18 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d907      	bls.n	8002848 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e150      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
 800283c:	40023800 	.word	0x40023800
 8002840:	42470000 	.word	0x42470000
 8002844:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002848:	4b88      	ldr	r3, [pc, #544]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 800284a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1ea      	bne.n	800282a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 8097 	beq.w	8002990 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002862:	2300      	movs	r3, #0
 8002864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002866:	4b81      	ldr	r3, [pc, #516]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10f      	bne.n	8002892 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	4b7d      	ldr	r3, [pc, #500]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	4a7c      	ldr	r2, [pc, #496]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 800287c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002880:	6413      	str	r3, [r2, #64]	@ 0x40
 8002882:	4b7a      	ldr	r3, [pc, #488]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288e:	2301      	movs	r3, #1
 8002890:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002892:	4b77      	ldr	r3, [pc, #476]	@ (8002a70 <HAL_RCC_OscConfig+0x474>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d118      	bne.n	80028d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289e:	4b74      	ldr	r3, [pc, #464]	@ (8002a70 <HAL_RCC_OscConfig+0x474>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a73      	ldr	r2, [pc, #460]	@ (8002a70 <HAL_RCC_OscConfig+0x474>)
 80028a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028aa:	f7ff fb35 	bl	8001f18 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b2:	f7ff fb31 	bl	8001f18 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e10c      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a70 <HAL_RCC_OscConfig+0x474>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d106      	bne.n	80028e6 <HAL_RCC_OscConfig+0x2ea>
 80028d8:	4b64      	ldr	r3, [pc, #400]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 80028da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028dc:	4a63      	ldr	r2, [pc, #396]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e4:	e01c      	b.n	8002920 <HAL_RCC_OscConfig+0x324>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b05      	cmp	r3, #5
 80028ec:	d10c      	bne.n	8002908 <HAL_RCC_OscConfig+0x30c>
 80028ee:	4b5f      	ldr	r3, [pc, #380]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f2:	4a5e      	ldr	r2, [pc, #376]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 80028f4:	f043 0304 	orr.w	r3, r3, #4
 80028f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028fa:	4b5c      	ldr	r3, [pc, #368]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fe:	4a5b      	ldr	r2, [pc, #364]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6713      	str	r3, [r2, #112]	@ 0x70
 8002906:	e00b      	b.n	8002920 <HAL_RCC_OscConfig+0x324>
 8002908:	4b58      	ldr	r3, [pc, #352]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290c:	4a57      	ldr	r2, [pc, #348]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 800290e:	f023 0301 	bic.w	r3, r3, #1
 8002912:	6713      	str	r3, [r2, #112]	@ 0x70
 8002914:	4b55      	ldr	r3, [pc, #340]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002918:	4a54      	ldr	r2, [pc, #336]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 800291a:	f023 0304 	bic.w	r3, r3, #4
 800291e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d015      	beq.n	8002954 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002928:	f7ff faf6 	bl	8001f18 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292e:	e00a      	b.n	8002946 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002930:	f7ff faf2 	bl	8001f18 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e0cb      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002946:	4b49      	ldr	r3, [pc, #292]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0ee      	beq.n	8002930 <HAL_RCC_OscConfig+0x334>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002954:	f7ff fae0 	bl	8001f18 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295a:	e00a      	b.n	8002972 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295c:	f7ff fadc 	bl	8001f18 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e0b5      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002972:	4b3e      	ldr	r3, [pc, #248]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1ee      	bne.n	800295c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800297e:	7dfb      	ldrb	r3, [r7, #23]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d105      	bne.n	8002990 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002984:	4b39      	ldr	r3, [pc, #228]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	4a38      	ldr	r2, [pc, #224]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 800298a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800298e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80a1 	beq.w	8002adc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800299a:	4b34      	ldr	r3, [pc, #208]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d05c      	beq.n	8002a60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d141      	bne.n	8002a32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ae:	4b31      	ldr	r3, [pc, #196]	@ (8002a74 <HAL_RCC_OscConfig+0x478>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7ff fab0 	bl	8001f18 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029bc:	f7ff faac 	bl	8001f18 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e087      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	4b27      	ldr	r3, [pc, #156]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69da      	ldr	r2, [r3, #28]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	019b      	lsls	r3, r3, #6
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f0:	085b      	lsrs	r3, r3, #1
 80029f2:	3b01      	subs	r3, #1
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fc:	061b      	lsls	r3, r3, #24
 80029fe:	491b      	ldr	r1, [pc, #108]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a04:	4b1b      	ldr	r3, [pc, #108]	@ (8002a74 <HAL_RCC_OscConfig+0x478>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7ff fa85 	bl	8001f18 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a12:	f7ff fa81 	bl	8001f18 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e05c      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x416>
 8002a30:	e054      	b.n	8002adc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <HAL_RCC_OscConfig+0x478>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7ff fa6e 	bl	8001f18 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a40:	f7ff fa6a 	bl	8001f18 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e045      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a52:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x444>
 8002a5e:	e03d      	b.n	8002adc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e038      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40007000 	.word	0x40007000
 8002a74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae8 <HAL_RCC_OscConfig+0x4ec>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d028      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d121      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d11a      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002aae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d111      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abe:	085b      	lsrs	r3, r3, #1
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800

08002aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0cc      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b00:	4b68      	ldr	r3, [pc, #416]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d90c      	bls.n	8002b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b65      	ldr	r3, [pc, #404]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b63      	ldr	r3, [pc, #396]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0b8      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d020      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b40:	4b59      	ldr	r3, [pc, #356]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4a58      	ldr	r2, [pc, #352]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b58:	4b53      	ldr	r3, [pc, #332]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a52      	ldr	r2, [pc, #328]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b64:	4b50      	ldr	r3, [pc, #320]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	494d      	ldr	r1, [pc, #308]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d044      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d119      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e07f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002baa:	4b3f      	ldr	r3, [pc, #252]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e06f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bba:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e067      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bca:	4b37      	ldr	r3, [pc, #220]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f023 0203 	bic.w	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4934      	ldr	r1, [pc, #208]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bdc:	f7ff f99c 	bl	8001f18 <HAL_GetTick>
 8002be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be4:	f7ff f998 	bl	8001f18 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e04f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 020c 	and.w	r2, r3, #12
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d1eb      	bne.n	8002be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b25      	ldr	r3, [pc, #148]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d20c      	bcs.n	8002c34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b22      	ldr	r3, [pc, #136]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b20      	ldr	r3, [pc, #128]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e032      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c40:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4916      	ldr	r1, [pc, #88]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	490e      	ldr	r1, [pc, #56]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c72:	f000 f821 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8002c76:	4602      	mov	r2, r0
 8002c78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	490a      	ldr	r1, [pc, #40]	@ (8002cac <HAL_RCC_ClockConfig+0x1c0>)
 8002c84:	5ccb      	ldrb	r3, [r1, r3]
 8002c86:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8a:	4a09      	ldr	r2, [pc, #36]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c8e:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff f8fc 	bl	8001e90 <HAL_InitTick>

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023c00 	.word	0x40023c00
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	080058f8 	.word	0x080058f8
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	20000004 	.word	0x20000004

08002cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cbc:	b094      	sub	sp, #80	@ 0x50
 8002cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cc8:	2300      	movs	r3, #0
 8002cca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd0:	4b79      	ldr	r3, [pc, #484]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d00d      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	f200 80e1 	bhi.w	8002ea4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0x34>
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d003      	beq.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cea:	e0db      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cec:	4b73      	ldr	r3, [pc, #460]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x204>)
 8002cee:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002cf0:	e0db      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cf2:	4b73      	ldr	r3, [pc, #460]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cf6:	e0d8      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d00:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d02:	4b6d      	ldr	r3, [pc, #436]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d063      	beq.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0e:	4b6a      	ldr	r3, [pc, #424]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	099b      	lsrs	r3, r3, #6
 8002d14:	2200      	movs	r2, #0
 8002d16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d20:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d22:	2300      	movs	r3, #0
 8002d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d2a:	4622      	mov	r2, r4
 8002d2c:	462b      	mov	r3, r5
 8002d2e:	f04f 0000 	mov.w	r0, #0
 8002d32:	f04f 0100 	mov.w	r1, #0
 8002d36:	0159      	lsls	r1, r3, #5
 8002d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d3c:	0150      	lsls	r0, r2, #5
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4621      	mov	r1, r4
 8002d44:	1a51      	subs	r1, r2, r1
 8002d46:	6139      	str	r1, [r7, #16]
 8002d48:	4629      	mov	r1, r5
 8002d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d5c:	4659      	mov	r1, fp
 8002d5e:	018b      	lsls	r3, r1, #6
 8002d60:	4651      	mov	r1, sl
 8002d62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d66:	4651      	mov	r1, sl
 8002d68:	018a      	lsls	r2, r1, #6
 8002d6a:	4651      	mov	r1, sl
 8002d6c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d70:	4659      	mov	r1, fp
 8002d72:	eb63 0901 	sbc.w	r9, r3, r1
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d8a:	4690      	mov	r8, r2
 8002d8c:	4699      	mov	r9, r3
 8002d8e:	4623      	mov	r3, r4
 8002d90:	eb18 0303 	adds.w	r3, r8, r3
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	462b      	mov	r3, r5
 8002d98:	eb49 0303 	adc.w	r3, r9, r3
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002daa:	4629      	mov	r1, r5
 8002dac:	024b      	lsls	r3, r1, #9
 8002dae:	4621      	mov	r1, r4
 8002db0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002db4:	4621      	mov	r1, r4
 8002db6:	024a      	lsls	r2, r1, #9
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dc8:	f7fd fd0c 	bl	80007e4 <__aeabi_uldivmod>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd4:	e058      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd6:	4b38      	ldr	r3, [pc, #224]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	099b      	lsrs	r3, r3, #6
 8002ddc:	2200      	movs	r2, #0
 8002dde:	4618      	mov	r0, r3
 8002de0:	4611      	mov	r1, r2
 8002de2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002de6:	623b      	str	r3, [r7, #32]
 8002de8:	2300      	movs	r3, #0
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002df0:	4642      	mov	r2, r8
 8002df2:	464b      	mov	r3, r9
 8002df4:	f04f 0000 	mov.w	r0, #0
 8002df8:	f04f 0100 	mov.w	r1, #0
 8002dfc:	0159      	lsls	r1, r3, #5
 8002dfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e02:	0150      	lsls	r0, r2, #5
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4641      	mov	r1, r8
 8002e0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e0e:	4649      	mov	r1, r9
 8002e10:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e28:	ebb2 040a 	subs.w	r4, r2, sl
 8002e2c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	00eb      	lsls	r3, r5, #3
 8002e3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e3e:	00e2      	lsls	r2, r4, #3
 8002e40:	4614      	mov	r4, r2
 8002e42:	461d      	mov	r5, r3
 8002e44:	4643      	mov	r3, r8
 8002e46:	18e3      	adds	r3, r4, r3
 8002e48:	603b      	str	r3, [r7, #0]
 8002e4a:	464b      	mov	r3, r9
 8002e4c:	eb45 0303 	adc.w	r3, r5, r3
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e5e:	4629      	mov	r1, r5
 8002e60:	028b      	lsls	r3, r1, #10
 8002e62:	4621      	mov	r1, r4
 8002e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e68:	4621      	mov	r1, r4
 8002e6a:	028a      	lsls	r2, r1, #10
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e72:	2200      	movs	r2, #0
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	61fa      	str	r2, [r7, #28]
 8002e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e7c:	f7fd fcb2 	bl	80007e4 <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4613      	mov	r3, r2
 8002e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e88:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	3301      	adds	r3, #1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002e98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ea2:	e002      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea4:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3750      	adds	r7, #80	@ 0x50
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	00f42400 	.word	0x00f42400
 8002ec0:	007a1200 	.word	0x007a1200

08002ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec8:	4b03      	ldr	r3, [pc, #12]	@ (8002ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eca:	681b      	ldr	r3, [r3, #0]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20000000 	.word	0x20000000

08002edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ee0:	f7ff fff0 	bl	8002ec4 <HAL_RCC_GetHCLKFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b05      	ldr	r3, [pc, #20]	@ (8002efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	0a9b      	lsrs	r3, r3, #10
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	4903      	ldr	r1, [pc, #12]	@ (8002f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40023800 	.word	0x40023800
 8002f00:	08005908 	.word	0x08005908

08002f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f08:	f7ff ffdc 	bl	8002ec4 <HAL_RCC_GetHCLKFreq>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	0b5b      	lsrs	r3, r3, #13
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	4903      	ldr	r1, [pc, #12]	@ (8002f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f1a:	5ccb      	ldrb	r3, [r1, r3]
 8002f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40023800 	.word	0x40023800
 8002f28:	08005908 	.word	0x08005908

08002f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e041      	b.n	8002fc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fe fd04 	bl	8001960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3304      	adds	r3, #4
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	f000 ff7a 	bl	8003e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d001      	beq.n	8002fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e044      	b.n	800306e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1e      	ldr	r2, [pc, #120]	@ (800307c <HAL_TIM_Base_Start_IT+0xb0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d018      	beq.n	8003038 <HAL_TIM_Base_Start_IT+0x6c>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800300e:	d013      	beq.n	8003038 <HAL_TIM_Base_Start_IT+0x6c>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1a      	ldr	r2, [pc, #104]	@ (8003080 <HAL_TIM_Base_Start_IT+0xb4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00e      	beq.n	8003038 <HAL_TIM_Base_Start_IT+0x6c>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a19      	ldr	r2, [pc, #100]	@ (8003084 <HAL_TIM_Base_Start_IT+0xb8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d009      	beq.n	8003038 <HAL_TIM_Base_Start_IT+0x6c>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a17      	ldr	r2, [pc, #92]	@ (8003088 <HAL_TIM_Base_Start_IT+0xbc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d004      	beq.n	8003038 <HAL_TIM_Base_Start_IT+0x6c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a16      	ldr	r2, [pc, #88]	@ (800308c <HAL_TIM_Base_Start_IT+0xc0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d111      	bne.n	800305c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b06      	cmp	r3, #6
 8003048:	d010      	beq.n	800306c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0201 	orr.w	r2, r2, #1
 8003058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305a:	e007      	b.n	800306c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40010000 	.word	0x40010000
 8003080:	40000400 	.word	0x40000400
 8003084:	40000800 	.word	0x40000800
 8003088:	40000c00 	.word	0x40000c00
 800308c:	40014000 	.word	0x40014000

08003090 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e041      	b.n	8003126 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f839 	bl	800312e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3304      	adds	r3, #4
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f000 fec8 	bl	8003e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <HAL_TIM_PWM_Start+0x24>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	bf14      	ite	ne
 8003160:	2301      	movne	r3, #1
 8003162:	2300      	moveq	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	e022      	b.n	80031ae <HAL_TIM_PWM_Start+0x6a>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b04      	cmp	r3, #4
 800316c:	d109      	bne.n	8003182 <HAL_TIM_PWM_Start+0x3e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	bf14      	ite	ne
 800317a:	2301      	movne	r3, #1
 800317c:	2300      	moveq	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	e015      	b.n	80031ae <HAL_TIM_PWM_Start+0x6a>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d109      	bne.n	800319c <HAL_TIM_PWM_Start+0x58>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e008      	b.n	80031ae <HAL_TIM_PWM_Start+0x6a>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	bf14      	ite	ne
 80031a8:	2301      	movne	r3, #1
 80031aa:	2300      	moveq	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e068      	b.n	8003288 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <HAL_TIM_PWM_Start+0x82>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031c4:	e013      	b.n	80031ee <HAL_TIM_PWM_Start+0xaa>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_PWM_Start+0x92>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031d4:	e00b      	b.n	80031ee <HAL_TIM_PWM_Start+0xaa>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_PWM_Start+0xa2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031e4:	e003      	b.n	80031ee <HAL_TIM_PWM_Start+0xaa>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2201      	movs	r2, #1
 80031f4:	6839      	ldr	r1, [r7, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f001 fa04 	bl	8004604 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a23      	ldr	r2, [pc, #140]	@ (8003290 <HAL_TIM_PWM_Start+0x14c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d107      	bne.n	8003216 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003214:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1d      	ldr	r2, [pc, #116]	@ (8003290 <HAL_TIM_PWM_Start+0x14c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d018      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003228:	d013      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a19      	ldr	r2, [pc, #100]	@ (8003294 <HAL_TIM_PWM_Start+0x150>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00e      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a17      	ldr	r2, [pc, #92]	@ (8003298 <HAL_TIM_PWM_Start+0x154>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d009      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a16      	ldr	r2, [pc, #88]	@ (800329c <HAL_TIM_PWM_Start+0x158>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d004      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a14      	ldr	r2, [pc, #80]	@ (80032a0 <HAL_TIM_PWM_Start+0x15c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d111      	bne.n	8003276 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b06      	cmp	r3, #6
 8003262:	d010      	beq.n	8003286 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003274:	e007      	b.n	8003286 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40010000 	.word	0x40010000
 8003294:	40000400 	.word	0x40000400
 8003298:	40000800 	.word	0x40000800
 800329c:	40000c00 	.word	0x40000c00
 80032a0:	40014000 	.word	0x40014000

080032a4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d109      	bne.n	80032cc <HAL_TIM_PWM_Start_IT+0x28>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	bf14      	ite	ne
 80032c4:	2301      	movne	r3, #1
 80032c6:	2300      	moveq	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	e022      	b.n	8003312 <HAL_TIM_PWM_Start_IT+0x6e>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d109      	bne.n	80032e6 <HAL_TIM_PWM_Start_IT+0x42>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	bf14      	ite	ne
 80032de:	2301      	movne	r3, #1
 80032e0:	2300      	moveq	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	e015      	b.n	8003312 <HAL_TIM_PWM_Start_IT+0x6e>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d109      	bne.n	8003300 <HAL_TIM_PWM_Start_IT+0x5c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	e008      	b.n	8003312 <HAL_TIM_PWM_Start_IT+0x6e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	bf14      	ite	ne
 800330c:	2301      	movne	r3, #1
 800330e:	2300      	moveq	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e0b3      	b.n	8003482 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d104      	bne.n	800332a <HAL_TIM_PWM_Start_IT+0x86>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003328:	e013      	b.n	8003352 <HAL_TIM_PWM_Start_IT+0xae>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b04      	cmp	r3, #4
 800332e:	d104      	bne.n	800333a <HAL_TIM_PWM_Start_IT+0x96>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003338:	e00b      	b.n	8003352 <HAL_TIM_PWM_Start_IT+0xae>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b08      	cmp	r3, #8
 800333e:	d104      	bne.n	800334a <HAL_TIM_PWM_Start_IT+0xa6>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003348:	e003      	b.n	8003352 <HAL_TIM_PWM_Start_IT+0xae>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b0c      	cmp	r3, #12
 8003356:	d841      	bhi.n	80033dc <HAL_TIM_PWM_Start_IT+0x138>
 8003358:	a201      	add	r2, pc, #4	@ (adr r2, 8003360 <HAL_TIM_PWM_Start_IT+0xbc>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003395 	.word	0x08003395
 8003364:	080033dd 	.word	0x080033dd
 8003368:	080033dd 	.word	0x080033dd
 800336c:	080033dd 	.word	0x080033dd
 8003370:	080033a7 	.word	0x080033a7
 8003374:	080033dd 	.word	0x080033dd
 8003378:	080033dd 	.word	0x080033dd
 800337c:	080033dd 	.word	0x080033dd
 8003380:	080033b9 	.word	0x080033b9
 8003384:	080033dd 	.word	0x080033dd
 8003388:	080033dd 	.word	0x080033dd
 800338c:	080033dd 	.word	0x080033dd
 8003390:	080033cb 	.word	0x080033cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0202 	orr.w	r2, r2, #2
 80033a2:	60da      	str	r2, [r3, #12]
      break;
 80033a4:	e01d      	b.n	80033e2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0204 	orr.w	r2, r2, #4
 80033b4:	60da      	str	r2, [r3, #12]
      break;
 80033b6:	e014      	b.n	80033e2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0208 	orr.w	r2, r2, #8
 80033c6:	60da      	str	r2, [r3, #12]
      break;
 80033c8:	e00b      	b.n	80033e2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0210 	orr.w	r2, r2, #16
 80033d8:	60da      	str	r2, [r3, #12]
      break;
 80033da:	e002      	b.n	80033e2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      break;
 80033e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d14b      	bne.n	8003480 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2201      	movs	r2, #1
 80033ee:	6839      	ldr	r1, [r7, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f001 f907 	bl	8004604 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a24      	ldr	r2, [pc, #144]	@ (800348c <HAL_TIM_PWM_Start_IT+0x1e8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d107      	bne.n	8003410 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800340e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1d      	ldr	r2, [pc, #116]	@ (800348c <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d018      	beq.n	800344c <HAL_TIM_PWM_Start_IT+0x1a8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003422:	d013      	beq.n	800344c <HAL_TIM_PWM_Start_IT+0x1a8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a19      	ldr	r2, [pc, #100]	@ (8003490 <HAL_TIM_PWM_Start_IT+0x1ec>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00e      	beq.n	800344c <HAL_TIM_PWM_Start_IT+0x1a8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a18      	ldr	r2, [pc, #96]	@ (8003494 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d009      	beq.n	800344c <HAL_TIM_PWM_Start_IT+0x1a8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a16      	ldr	r2, [pc, #88]	@ (8003498 <HAL_TIM_PWM_Start_IT+0x1f4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d004      	beq.n	800344c <HAL_TIM_PWM_Start_IT+0x1a8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a15      	ldr	r2, [pc, #84]	@ (800349c <HAL_TIM_PWM_Start_IT+0x1f8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d111      	bne.n	8003470 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b06      	cmp	r3, #6
 800345c:	d010      	beq.n	8003480 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f042 0201 	orr.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346e:	e007      	b.n	8003480 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0201 	orr.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40010000 	.word	0x40010000
 8003490:	40000400 	.word	0x40000400
 8003494:	40000800 	.word	0x40000800
 8003498:	40000c00 	.word	0x40000c00
 800349c:	40014000 	.word	0x40014000

080034a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e041      	b.n	8003536 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fe faa6 	bl	8001a18 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3304      	adds	r3, #4
 80034dc:	4619      	mov	r1, r3
 80034de:	4610      	mov	r0, r2
 80034e0:	f000 fcc0 	bl	8003e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d104      	bne.n	800355e <HAL_TIM_IC_Start_IT+0x1e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800355a:	b2db      	uxtb	r3, r3
 800355c:	e013      	b.n	8003586 <HAL_TIM_IC_Start_IT+0x46>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b04      	cmp	r3, #4
 8003562:	d104      	bne.n	800356e <HAL_TIM_IC_Start_IT+0x2e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800356a:	b2db      	uxtb	r3, r3
 800356c:	e00b      	b.n	8003586 <HAL_TIM_IC_Start_IT+0x46>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b08      	cmp	r3, #8
 8003572:	d104      	bne.n	800357e <HAL_TIM_IC_Start_IT+0x3e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800357a:	b2db      	uxtb	r3, r3
 800357c:	e003      	b.n	8003586 <HAL_TIM_IC_Start_IT+0x46>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003584:	b2db      	uxtb	r3, r3
 8003586:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d104      	bne.n	8003598 <HAL_TIM_IC_Start_IT+0x58>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003594:	b2db      	uxtb	r3, r3
 8003596:	e013      	b.n	80035c0 <HAL_TIM_IC_Start_IT+0x80>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b04      	cmp	r3, #4
 800359c:	d104      	bne.n	80035a8 <HAL_TIM_IC_Start_IT+0x68>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	e00b      	b.n	80035c0 <HAL_TIM_IC_Start_IT+0x80>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d104      	bne.n	80035b8 <HAL_TIM_IC_Start_IT+0x78>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	e003      	b.n	80035c0 <HAL_TIM_IC_Start_IT+0x80>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80035c2:	7bbb      	ldrb	r3, [r7, #14]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d102      	bne.n	80035ce <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80035c8:	7b7b      	ldrb	r3, [r7, #13]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d001      	beq.n	80035d2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e0c2      	b.n	8003758 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d104      	bne.n	80035e2 <HAL_TIM_IC_Start_IT+0xa2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035e0:	e013      	b.n	800360a <HAL_TIM_IC_Start_IT+0xca>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d104      	bne.n	80035f2 <HAL_TIM_IC_Start_IT+0xb2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035f0:	e00b      	b.n	800360a <HAL_TIM_IC_Start_IT+0xca>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_IC_Start_IT+0xc2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003600:	e003      	b.n	800360a <HAL_TIM_IC_Start_IT+0xca>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d104      	bne.n	800361a <HAL_TIM_IC_Start_IT+0xda>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003618:	e013      	b.n	8003642 <HAL_TIM_IC_Start_IT+0x102>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b04      	cmp	r3, #4
 800361e:	d104      	bne.n	800362a <HAL_TIM_IC_Start_IT+0xea>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003628:	e00b      	b.n	8003642 <HAL_TIM_IC_Start_IT+0x102>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d104      	bne.n	800363a <HAL_TIM_IC_Start_IT+0xfa>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003638:	e003      	b.n	8003642 <HAL_TIM_IC_Start_IT+0x102>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2202      	movs	r2, #2
 800363e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b0c      	cmp	r3, #12
 8003646:	d841      	bhi.n	80036cc <HAL_TIM_IC_Start_IT+0x18c>
 8003648:	a201      	add	r2, pc, #4	@ (adr r2, 8003650 <HAL_TIM_IC_Start_IT+0x110>)
 800364a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364e:	bf00      	nop
 8003650:	08003685 	.word	0x08003685
 8003654:	080036cd 	.word	0x080036cd
 8003658:	080036cd 	.word	0x080036cd
 800365c:	080036cd 	.word	0x080036cd
 8003660:	08003697 	.word	0x08003697
 8003664:	080036cd 	.word	0x080036cd
 8003668:	080036cd 	.word	0x080036cd
 800366c:	080036cd 	.word	0x080036cd
 8003670:	080036a9 	.word	0x080036a9
 8003674:	080036cd 	.word	0x080036cd
 8003678:	080036cd 	.word	0x080036cd
 800367c:	080036cd 	.word	0x080036cd
 8003680:	080036bb 	.word	0x080036bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0202 	orr.w	r2, r2, #2
 8003692:	60da      	str	r2, [r3, #12]
      break;
 8003694:	e01d      	b.n	80036d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0204 	orr.w	r2, r2, #4
 80036a4:	60da      	str	r2, [r3, #12]
      break;
 80036a6:	e014      	b.n	80036d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0208 	orr.w	r2, r2, #8
 80036b6:	60da      	str	r2, [r3, #12]
      break;
 80036b8:	e00b      	b.n	80036d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0210 	orr.w	r2, r2, #16
 80036c8:	60da      	str	r2, [r3, #12]
      break;
 80036ca:	e002      	b.n	80036d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	73fb      	strb	r3, [r7, #15]
      break;
 80036d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d13e      	bne.n	8003756 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2201      	movs	r2, #1
 80036de:	6839      	ldr	r1, [r7, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 ff8f 	bl	8004604 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003760 <HAL_TIM_IC_Start_IT+0x220>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d018      	beq.n	8003722 <HAL_TIM_IC_Start_IT+0x1e2>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036f8:	d013      	beq.n	8003722 <HAL_TIM_IC_Start_IT+0x1e2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a19      	ldr	r2, [pc, #100]	@ (8003764 <HAL_TIM_IC_Start_IT+0x224>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00e      	beq.n	8003722 <HAL_TIM_IC_Start_IT+0x1e2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a17      	ldr	r2, [pc, #92]	@ (8003768 <HAL_TIM_IC_Start_IT+0x228>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d009      	beq.n	8003722 <HAL_TIM_IC_Start_IT+0x1e2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a16      	ldr	r2, [pc, #88]	@ (800376c <HAL_TIM_IC_Start_IT+0x22c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d004      	beq.n	8003722 <HAL_TIM_IC_Start_IT+0x1e2>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a14      	ldr	r2, [pc, #80]	@ (8003770 <HAL_TIM_IC_Start_IT+0x230>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d111      	bne.n	8003746 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b06      	cmp	r3, #6
 8003732:	d010      	beq.n	8003756 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003744:	e007      	b.n	8003756 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0201 	orr.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003756:	7bfb      	ldrb	r3, [r7, #15]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40010000 	.word	0x40010000
 8003764:	40000400 	.word	0x40000400
 8003768:	40000800 	.word	0x40000800
 800376c:	40000c00 	.word	0x40000c00
 8003770:	40014000 	.word	0x40014000

08003774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d020      	beq.n	80037d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01b      	beq.n	80037d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0202 	mvn.w	r2, #2
 80037a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fd fc78 	bl	80010b4 <HAL_TIM_IC_CaptureCallback>
 80037c4:	e005      	b.n	80037d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd fd00 	bl	80011cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fb35 	bl	8003e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d020      	beq.n	8003824 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01b      	beq.n	8003824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0204 	mvn.w	r2, #4
 80037f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fd fc52 	bl	80010b4 <HAL_TIM_IC_CaptureCallback>
 8003810:	e005      	b.n	800381e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fd fcda 	bl	80011cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fb0f 	bl	8003e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d020      	beq.n	8003870 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01b      	beq.n	8003870 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0208 	mvn.w	r2, #8
 8003840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2204      	movs	r2, #4
 8003846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd fc2c 	bl	80010b4 <HAL_TIM_IC_CaptureCallback>
 800385c:	e005      	b.n	800386a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd fcb4 	bl	80011cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fae9 	bl	8003e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b00      	cmp	r3, #0
 8003878:	d020      	beq.n	80038bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01b      	beq.n	80038bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0210 	mvn.w	r2, #16
 800388c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2208      	movs	r2, #8
 8003892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd fc06 	bl	80010b4 <HAL_TIM_IC_CaptureCallback>
 80038a8:	e005      	b.n	80038b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fd fc8e 	bl	80011cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fac3 	bl	8003e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00c      	beq.n	80038e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0201 	mvn.w	r2, #1
 80038d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 faa4 	bl	8003e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00c      	beq.n	8003904 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 ff70 	bl	80047e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00c      	beq.n	8003928 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fa94 	bl	8003e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00c      	beq.n	800394c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0220 	mvn.w	r2, #32
 8003944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 ff42 	bl	80047d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_TIM_IC_ConfigChannel+0x1e>
 800396e:	2302      	movs	r3, #2
 8003970:	e088      	b.n	8003a84 <HAL_TIM_IC_ConfigChannel+0x130>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d11b      	bne.n	80039b8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003990:	f000 fc80 	bl	8004294 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 020c 	bic.w	r2, r2, #12
 80039a2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6999      	ldr	r1, [r3, #24]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	619a      	str	r2, [r3, #24]
 80039b6:	e060      	b.n	8003a7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d11c      	bne.n	80039f8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80039ce:	f000 fcf8 	bl	80043c2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699a      	ldr	r2, [r3, #24]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80039e0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6999      	ldr	r1, [r3, #24]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	021a      	lsls	r2, r3, #8
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	619a      	str	r2, [r3, #24]
 80039f6:	e040      	b.n	8003a7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d11b      	bne.n	8003a36 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003a0e:	f000 fd45 	bl	800449c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 020c 	bic.w	r2, r2, #12
 8003a20:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69d9      	ldr	r1, [r3, #28]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	61da      	str	r2, [r3, #28]
 8003a34:	e021      	b.n	8003a7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b0c      	cmp	r3, #12
 8003a3a:	d11c      	bne.n	8003a76 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003a4c:	f000 fd62 	bl	8004514 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	69da      	ldr	r2, [r3, #28]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003a5e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69d9      	ldr	r1, [r3, #28]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	021a      	lsls	r2, r3, #8
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	61da      	str	r2, [r3, #28]
 8003a74:	e001      	b.n	8003a7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e0ae      	b.n	8003c08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b0c      	cmp	r3, #12
 8003ab6:	f200 809f 	bhi.w	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003aba:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac0:	08003af5 	.word	0x08003af5
 8003ac4:	08003bf9 	.word	0x08003bf9
 8003ac8:	08003bf9 	.word	0x08003bf9
 8003acc:	08003bf9 	.word	0x08003bf9
 8003ad0:	08003b35 	.word	0x08003b35
 8003ad4:	08003bf9 	.word	0x08003bf9
 8003ad8:	08003bf9 	.word	0x08003bf9
 8003adc:	08003bf9 	.word	0x08003bf9
 8003ae0:	08003b77 	.word	0x08003b77
 8003ae4:	08003bf9 	.word	0x08003bf9
 8003ae8:	08003bf9 	.word	0x08003bf9
 8003aec:	08003bf9 	.word	0x08003bf9
 8003af0:	08003bb7 	.word	0x08003bb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fa3e 	bl	8003f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0208 	orr.w	r2, r2, #8
 8003b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0204 	bic.w	r2, r2, #4
 8003b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6999      	ldr	r1, [r3, #24]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	619a      	str	r2, [r3, #24]
      break;
 8003b32:	e064      	b.n	8003bfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fa84 	bl	8004048 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6999      	ldr	r1, [r3, #24]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	021a      	lsls	r2, r3, #8
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	619a      	str	r2, [r3, #24]
      break;
 8003b74:	e043      	b.n	8003bfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 facf 	bl	8004120 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0208 	orr.w	r2, r2, #8
 8003b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69da      	ldr	r2, [r3, #28]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0204 	bic.w	r2, r2, #4
 8003ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69d9      	ldr	r1, [r3, #28]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	61da      	str	r2, [r3, #28]
      break;
 8003bb4:	e023      	b.n	8003bfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fb19 	bl	80041f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69d9      	ldr	r1, [r3, #28]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	021a      	lsls	r2, r3, #8
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	61da      	str	r2, [r3, #28]
      break;
 8003bf6:	e002      	b.n	8003bfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003bfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_TIM_ConfigClockSource+0x1c>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e0b4      	b.n	8003d96 <HAL_TIM_ConfigClockSource+0x186>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c64:	d03e      	beq.n	8003ce4 <HAL_TIM_ConfigClockSource+0xd4>
 8003c66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c6a:	f200 8087 	bhi.w	8003d7c <HAL_TIM_ConfigClockSource+0x16c>
 8003c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c72:	f000 8086 	beq.w	8003d82 <HAL_TIM_ConfigClockSource+0x172>
 8003c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c7a:	d87f      	bhi.n	8003d7c <HAL_TIM_ConfigClockSource+0x16c>
 8003c7c:	2b70      	cmp	r3, #112	@ 0x70
 8003c7e:	d01a      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0xa6>
 8003c80:	2b70      	cmp	r3, #112	@ 0x70
 8003c82:	d87b      	bhi.n	8003d7c <HAL_TIM_ConfigClockSource+0x16c>
 8003c84:	2b60      	cmp	r3, #96	@ 0x60
 8003c86:	d050      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x11a>
 8003c88:	2b60      	cmp	r3, #96	@ 0x60
 8003c8a:	d877      	bhi.n	8003d7c <HAL_TIM_ConfigClockSource+0x16c>
 8003c8c:	2b50      	cmp	r3, #80	@ 0x50
 8003c8e:	d03c      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0xfa>
 8003c90:	2b50      	cmp	r3, #80	@ 0x50
 8003c92:	d873      	bhi.n	8003d7c <HAL_TIM_ConfigClockSource+0x16c>
 8003c94:	2b40      	cmp	r3, #64	@ 0x40
 8003c96:	d058      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0x13a>
 8003c98:	2b40      	cmp	r3, #64	@ 0x40
 8003c9a:	d86f      	bhi.n	8003d7c <HAL_TIM_ConfigClockSource+0x16c>
 8003c9c:	2b30      	cmp	r3, #48	@ 0x30
 8003c9e:	d064      	beq.n	8003d6a <HAL_TIM_ConfigClockSource+0x15a>
 8003ca0:	2b30      	cmp	r3, #48	@ 0x30
 8003ca2:	d86b      	bhi.n	8003d7c <HAL_TIM_ConfigClockSource+0x16c>
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d060      	beq.n	8003d6a <HAL_TIM_ConfigClockSource+0x15a>
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d867      	bhi.n	8003d7c <HAL_TIM_ConfigClockSource+0x16c>
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d05c      	beq.n	8003d6a <HAL_TIM_ConfigClockSource+0x15a>
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d05a      	beq.n	8003d6a <HAL_TIM_ConfigClockSource+0x15a>
 8003cb4:	e062      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cc6:	f000 fc7d 	bl	80045c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003cd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	609a      	str	r2, [r3, #8]
      break;
 8003ce2:	e04f      	b.n	8003d84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cf4:	f000 fc66 	bl	80045c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d06:	609a      	str	r2, [r3, #8]
      break;
 8003d08:	e03c      	b.n	8003d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d16:	461a      	mov	r2, r3
 8003d18:	f000 fb24 	bl	8004364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2150      	movs	r1, #80	@ 0x50
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fc33 	bl	800458e <TIM_ITRx_SetConfig>
      break;
 8003d28:	e02c      	b.n	8003d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d36:	461a      	mov	r2, r3
 8003d38:	f000 fb80 	bl	800443c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2160      	movs	r1, #96	@ 0x60
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fc23 	bl	800458e <TIM_ITRx_SetConfig>
      break;
 8003d48:	e01c      	b.n	8003d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d56:	461a      	mov	r2, r3
 8003d58:	f000 fb04 	bl	8004364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2140      	movs	r1, #64	@ 0x40
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fc13 	bl	800458e <TIM_ITRx_SetConfig>
      break;
 8003d68:	e00c      	b.n	8003d84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4619      	mov	r1, r3
 8003d74:	4610      	mov	r0, r2
 8003d76:	f000 fc0a 	bl	800458e <TIM_ITRx_SetConfig>
      break;
 8003d7a:	e003      	b.n	8003d84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d80:	e000      	b.n	8003d84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b0c      	cmp	r3, #12
 8003db2:	d831      	bhi.n	8003e18 <HAL_TIM_ReadCapturedValue+0x78>
 8003db4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dbc <HAL_TIM_ReadCapturedValue+0x1c>)
 8003db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dba:	bf00      	nop
 8003dbc:	08003df1 	.word	0x08003df1
 8003dc0:	08003e19 	.word	0x08003e19
 8003dc4:	08003e19 	.word	0x08003e19
 8003dc8:	08003e19 	.word	0x08003e19
 8003dcc:	08003dfb 	.word	0x08003dfb
 8003dd0:	08003e19 	.word	0x08003e19
 8003dd4:	08003e19 	.word	0x08003e19
 8003dd8:	08003e19 	.word	0x08003e19
 8003ddc:	08003e05 	.word	0x08003e05
 8003de0:	08003e19 	.word	0x08003e19
 8003de4:	08003e19 	.word	0x08003e19
 8003de8:	08003e19 	.word	0x08003e19
 8003dec:	08003e0f 	.word	0x08003e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df6:	60fb      	str	r3, [r7, #12]

      break;
 8003df8:	e00f      	b.n	8003e1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e00:	60fb      	str	r3, [r7, #12]

      break;
 8003e02:	e00a      	b.n	8003e1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e0a:	60fb      	str	r3, [r7, #12]

      break;
 8003e0c:	e005      	b.n	8003e1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e14:	60fb      	str	r3, [r7, #12]

      break;
 8003e16:	e000      	b.n	8003e1a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003e18:	bf00      	nop
  }

  return tmpreg;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a3a      	ldr	r2, [pc, #232]	@ (8003f60 <TIM_Base_SetConfig+0xfc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d00f      	beq.n	8003e9c <TIM_Base_SetConfig+0x38>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e82:	d00b      	beq.n	8003e9c <TIM_Base_SetConfig+0x38>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a37      	ldr	r2, [pc, #220]	@ (8003f64 <TIM_Base_SetConfig+0x100>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d007      	beq.n	8003e9c <TIM_Base_SetConfig+0x38>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a36      	ldr	r2, [pc, #216]	@ (8003f68 <TIM_Base_SetConfig+0x104>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d003      	beq.n	8003e9c <TIM_Base_SetConfig+0x38>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a35      	ldr	r2, [pc, #212]	@ (8003f6c <TIM_Base_SetConfig+0x108>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d108      	bne.n	8003eae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f60 <TIM_Base_SetConfig+0xfc>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d01b      	beq.n	8003eee <TIM_Base_SetConfig+0x8a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ebc:	d017      	beq.n	8003eee <TIM_Base_SetConfig+0x8a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a28      	ldr	r2, [pc, #160]	@ (8003f64 <TIM_Base_SetConfig+0x100>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d013      	beq.n	8003eee <TIM_Base_SetConfig+0x8a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a27      	ldr	r2, [pc, #156]	@ (8003f68 <TIM_Base_SetConfig+0x104>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00f      	beq.n	8003eee <TIM_Base_SetConfig+0x8a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a26      	ldr	r2, [pc, #152]	@ (8003f6c <TIM_Base_SetConfig+0x108>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00b      	beq.n	8003eee <TIM_Base_SetConfig+0x8a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a25      	ldr	r2, [pc, #148]	@ (8003f70 <TIM_Base_SetConfig+0x10c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d007      	beq.n	8003eee <TIM_Base_SetConfig+0x8a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a24      	ldr	r2, [pc, #144]	@ (8003f74 <TIM_Base_SetConfig+0x110>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d003      	beq.n	8003eee <TIM_Base_SetConfig+0x8a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a23      	ldr	r2, [pc, #140]	@ (8003f78 <TIM_Base_SetConfig+0x114>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d108      	bne.n	8003f00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a0e      	ldr	r2, [pc, #56]	@ (8003f60 <TIM_Base_SetConfig+0xfc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d103      	bne.n	8003f34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d105      	bne.n	8003f52 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f023 0201 	bic.w	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	611a      	str	r2, [r3, #16]
  }
}
 8003f52:	bf00      	nop
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40010000 	.word	0x40010000
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800
 8003f6c:	40000c00 	.word	0x40000c00
 8003f70:	40014000 	.word	0x40014000
 8003f74:	40014400 	.word	0x40014400
 8003f78:	40014800 	.word	0x40014800

08003f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	f023 0201 	bic.w	r2, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f023 0303 	bic.w	r3, r3, #3
 8003fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f023 0302 	bic.w	r3, r3, #2
 8003fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8004044 <TIM_OC1_SetConfig+0xc8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d10c      	bne.n	8003ff2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f023 0308 	bic.w	r3, r3, #8
 8003fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f023 0304 	bic.w	r3, r3, #4
 8003ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a13      	ldr	r2, [pc, #76]	@ (8004044 <TIM_OC1_SetConfig+0xc8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d111      	bne.n	800401e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	621a      	str	r2, [r3, #32]
}
 8004038:	bf00      	nop
 800403a:	371c      	adds	r7, #28
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	40010000 	.word	0x40010000

08004048 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f023 0210 	bic.w	r2, r3, #16
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800407e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f023 0320 	bic.w	r3, r3, #32
 8004092:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a1e      	ldr	r2, [pc, #120]	@ (800411c <TIM_OC2_SetConfig+0xd4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d10d      	bne.n	80040c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a15      	ldr	r2, [pc, #84]	@ (800411c <TIM_OC2_SetConfig+0xd4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d113      	bne.n	80040f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	621a      	str	r2, [r3, #32]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40010000 	.word	0x40010000

08004120 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800414e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0303 	bic.w	r3, r3, #3
 8004156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a1d      	ldr	r2, [pc, #116]	@ (80041f0 <TIM_OC3_SetConfig+0xd0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d10d      	bne.n	800419a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004184:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a14      	ldr	r2, [pc, #80]	@ (80041f0 <TIM_OC3_SetConfig+0xd0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d113      	bne.n	80041ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	621a      	str	r2, [r3, #32]
}
 80041e4:	bf00      	nop
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	40010000 	.word	0x40010000

080041f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800422a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4313      	orrs	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800423e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	031b      	lsls	r3, r3, #12
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a10      	ldr	r2, [pc, #64]	@ (8004290 <TIM_OC4_SetConfig+0x9c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d109      	bne.n	8004268 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800425a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	019b      	lsls	r3, r3, #6
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	621a      	str	r2, [r3, #32]
}
 8004282:	bf00      	nop
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40010000 	.word	0x40010000

08004294 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f023 0201 	bic.w	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4a24      	ldr	r2, [pc, #144]	@ (8004350 <TIM_TI1_SetConfig+0xbc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d013      	beq.n	80042ea <TIM_TI1_SetConfig+0x56>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c8:	d00f      	beq.n	80042ea <TIM_TI1_SetConfig+0x56>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a21      	ldr	r2, [pc, #132]	@ (8004354 <TIM_TI1_SetConfig+0xc0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00b      	beq.n	80042ea <TIM_TI1_SetConfig+0x56>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4a20      	ldr	r2, [pc, #128]	@ (8004358 <TIM_TI1_SetConfig+0xc4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d007      	beq.n	80042ea <TIM_TI1_SetConfig+0x56>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4a1f      	ldr	r2, [pc, #124]	@ (800435c <TIM_TI1_SetConfig+0xc8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d003      	beq.n	80042ea <TIM_TI1_SetConfig+0x56>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004360 <TIM_TI1_SetConfig+0xcc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d101      	bne.n	80042ee <TIM_TI1_SetConfig+0x5a>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <TIM_TI1_SetConfig+0x5c>
 80042ee:	2300      	movs	r3, #0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f023 0303 	bic.w	r3, r3, #3
 80042fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	e003      	b.n	800430e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004314:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	b2db      	uxtb	r3, r3
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f023 030a 	bic.w	r3, r3, #10
 8004328:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f003 030a 	and.w	r3, r3, #10
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	621a      	str	r2, [r3, #32]
}
 8004342:	bf00      	nop
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40010000 	.word	0x40010000
 8004354:	40000400 	.word	0x40000400
 8004358:	40000800 	.word	0x40000800
 800435c:	40000c00 	.word	0x40000c00
 8004360:	40014000 	.word	0x40014000

08004364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f023 0201 	bic.w	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800438e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f023 030a 	bic.w	r3, r3, #10
 80043a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	621a      	str	r2, [r3, #32]
}
 80043b6:	bf00      	nop
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b087      	sub	sp, #28
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f023 0210 	bic.w	r2, r3, #16
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004400:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	031b      	lsls	r3, r3, #12
 8004406:	b29b      	uxth	r3, r3
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004414:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	621a      	str	r2, [r3, #32]
}
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	f023 0210 	bic.w	r2, r3, #16
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	031b      	lsls	r3, r3, #12
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004478:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	621a      	str	r2, [r3, #32]
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f023 0303 	bic.w	r3, r3, #3
 80044c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80044ec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	621a      	str	r2, [r3, #32]
}
 8004508:	bf00      	nop
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004540:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004552:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	031b      	lsls	r3, r3, #12
 8004558:	b29b      	uxth	r3, r3
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004566:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	031b      	lsls	r3, r3, #12
 800456c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	621a      	str	r2, [r3, #32]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800458e:	b480      	push	{r7}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f043 0307 	orr.w	r3, r3, #7
 80045b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	609a      	str	r2, [r3, #8]
}
 80045b8:	bf00      	nop
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	021a      	lsls	r2, r3, #8
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	609a      	str	r2, [r3, #8]
}
 80045f8:	bf00      	nop
 80045fa:	371c      	adds	r7, #28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 031f 	and.w	r3, r3, #31
 8004616:	2201      	movs	r2, #1
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a1a      	ldr	r2, [r3, #32]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	43db      	mvns	r3, r3
 8004626:	401a      	ands	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a1a      	ldr	r2, [r3, #32]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	fa01 f303 	lsl.w	r3, r1, r3
 800463c:	431a      	orrs	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	621a      	str	r2, [r3, #32]
}
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004664:	2302      	movs	r3, #2
 8004666:	e050      	b.n	800470a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800468e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d018      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b4:	d013      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a18      	ldr	r2, [pc, #96]	@ (800471c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00e      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a16      	ldr	r2, [pc, #88]	@ (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d009      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a15      	ldr	r2, [pc, #84]	@ (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d004      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a13      	ldr	r2, [pc, #76]	@ (8004728 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d10c      	bne.n	80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40010000 	.word	0x40010000
 800471c:	40000400 	.word	0x40000400
 8004720:	40000800 	.word	0x40000800
 8004724:	40000c00 	.word	0x40000c00
 8004728:	40014000 	.word	0x40014000

0800472c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004744:	2302      	movs	r3, #2
 8004746:	e03d      	b.n	80047c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e042      	b.n	8004890 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d106      	bne.n	8004824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fd fa3e 	bl	8001ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2224      	movs	r2, #36	@ 0x24
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800483a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fdaf 	bl	80053a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695a      	ldr	r2, [r3, #20]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	4613      	mov	r3, r2
 80048a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d112      	bne.n	80048d8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HAL_UART_Receive_IT+0x26>
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e00b      	b.n	80048da <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048c8:	88fb      	ldrh	r3, [r7, #6]
 80048ca:	461a      	mov	r2, r3
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 fb76 	bl	8004fc0 <UART_Start_Receive_IT>
 80048d4:	4603      	mov	r3, r0
 80048d6:	e000      	b.n	80048da <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80048d8:	2302      	movs	r3, #2
  }
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b09a      	sub	sp, #104	@ 0x68
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	330c      	adds	r3, #12
 80048f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80048fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004902:	667b      	str	r3, [r7, #100]	@ 0x64
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	330c      	adds	r3, #12
 800490a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800490c:	657a      	str	r2, [r7, #84]	@ 0x54
 800490e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004912:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800491a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e5      	bne.n	80048ec <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3314      	adds	r3, #20
 8004926:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	663b      	str	r3, [r7, #96]	@ 0x60
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3314      	adds	r3, #20
 800493e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004940:	643a      	str	r2, [r7, #64]	@ 0x40
 8004942:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004946:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800494e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e5      	bne.n	8004920 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004958:	2b01      	cmp	r3, #1
 800495a:	d119      	bne.n	8004990 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	61fb      	str	r3, [r7, #28]
   return(result);
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f023 0310 	bic.w	r3, r3, #16
 8004972:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	330c      	adds	r3, #12
 800497a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800497c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800497e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e5      	bne.n	800495c <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499a:	2b40      	cmp	r3, #64	@ 0x40
 800499c:	d13f      	bne.n	8004a1e <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3314      	adds	r3, #20
 80049a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	e853 3f00 	ldrex	r3, [r3]
 80049ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3314      	adds	r3, #20
 80049bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049be:	61ba      	str	r2, [r7, #24]
 80049c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c2:	6979      	ldr	r1, [r7, #20]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	e841 2300 	strex	r3, r2, [r1]
 80049ca:	613b      	str	r3, [r7, #16]
   return(result);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1e5      	bne.n	800499e <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d013      	beq.n	8004a02 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049de:	4a19      	ldr	r2, [pc, #100]	@ (8004a44 <HAL_UART_AbortReceive_IT+0x160>)
 80049e0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fd fc47 	bl	800227a <HAL_DMA_Abort_IT>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d022      	beq.n	8004a38 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049fc:	4610      	mov	r0, r2
 80049fe:	4798      	blx	r3
 8004a00:	e01a      	b.n	8004a38 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fabc 	bl	8004f94 <HAL_UART_AbortReceiveCpltCallback>
 8004a1c:	e00c      	b.n	8004a38 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 faae 	bl	8004f94 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3768      	adds	r7, #104	@ 0x68
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	08005123 	.word	0x08005123

08004a48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b0ba      	sub	sp, #232	@ 0xe8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10f      	bne.n	8004aae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <HAL_UART_IRQHandler+0x66>
 8004a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fbbb 	bl	8005222 <UART_Receive_IT>
      return;
 8004aac:	e25b      	b.n	8004f66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80de 	beq.w	8004c74 <HAL_UART_IRQHandler+0x22c>
 8004ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80d1 	beq.w	8004c74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00b      	beq.n	8004af6 <HAL_UART_IRQHandler+0xae>
 8004ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aee:	f043 0201 	orr.w	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <HAL_UART_IRQHandler+0xd2>
 8004b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b12:	f043 0202 	orr.w	r2, r3, #2
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00b      	beq.n	8004b3e <HAL_UART_IRQHandler+0xf6>
 8004b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b36:	f043 0204 	orr.w	r2, r3, #4
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d011      	beq.n	8004b6e <HAL_UART_IRQHandler+0x126>
 8004b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d105      	bne.n	8004b62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b66:	f043 0208 	orr.w	r2, r3, #8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 81f2 	beq.w	8004f5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_UART_IRQHandler+0x14e>
 8004b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fb46 	bl	8005222 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba0:	2b40      	cmp	r3, #64	@ 0x40
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d103      	bne.n	8004bc2 <HAL_UART_IRQHandler+0x17a>
 8004bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d04f      	beq.n	8004c62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa36 	bl	8005034 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd2:	2b40      	cmp	r3, #64	@ 0x40
 8004bd4:	d141      	bne.n	8004c5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3314      	adds	r3, #20
 8004bdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3314      	adds	r3, #20
 8004bfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1d9      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d013      	beq.n	8004c52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e28 <HAL_UART_IRQHandler+0x3e0>)
 8004c30:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fd fb1f 	bl	800227a <HAL_DMA_Abort_IT>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c50:	e00e      	b.n	8004c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f994 	bl	8004f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c58:	e00a      	b.n	8004c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f990 	bl	8004f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c60:	e006      	b.n	8004c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f98c 	bl	8004f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c6e:	e175      	b.n	8004f5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c70:	bf00      	nop
    return;
 8004c72:	e173      	b.n	8004f5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	f040 814f 	bne.w	8004f1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 8148 	beq.w	8004f1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8141 	beq.w	8004f1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cba:	2b40      	cmp	r3, #64	@ 0x40
 8004cbc:	f040 80b6 	bne.w	8004e2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ccc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8145 	beq.w	8004f60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	f080 813e 	bcs.w	8004f60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cf6:	f000 8088 	beq.w	8004e0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	330c      	adds	r3, #12
 8004d00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d08:	e853 3f00 	ldrex	r3, [r3]
 8004d0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1d9      	bne.n	8004cfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3314      	adds	r3, #20
 8004d4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3314      	adds	r3, #20
 8004d66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e1      	bne.n	8004d46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3314      	adds	r3, #20
 8004d88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3314      	adds	r3, #20
 8004da2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004da6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004da8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004dac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004db4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e3      	bne.n	8004d82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	330c      	adds	r3, #12
 8004dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004dd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dda:	f023 0310 	bic.w	r3, r3, #16
 8004dde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	330c      	adds	r3, #12
 8004de8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004dec:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004dee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004df2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e3      	bne.n	8004dc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fd f9c8 	bl	800219a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f8c1 	bl	8004fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e26:	e09b      	b.n	8004f60 <HAL_UART_IRQHandler+0x518>
 8004e28:	080050fb 	.word	0x080050fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 808e 	beq.w	8004f64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 8089 	beq.w	8004f64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	330c      	adds	r3, #12
 8004e58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	330c      	adds	r3, #12
 8004e72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e76:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e3      	bne.n	8004e52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3314      	adds	r3, #20
 8004e90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	623b      	str	r3, [r7, #32]
   return(result);
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3314      	adds	r3, #20
 8004eaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004eae:	633a      	str	r2, [r7, #48]	@ 0x30
 8004eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e3      	bne.n	8004e8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0310 	bic.w	r3, r3, #16
 8004ee6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	330c      	adds	r3, #12
 8004ef0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ef4:	61fa      	str	r2, [r7, #28]
 8004ef6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	69b9      	ldr	r1, [r7, #24]
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	e841 2300 	strex	r3, r2, [r1]
 8004f00:	617b      	str	r3, [r7, #20]
   return(result);
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e3      	bne.n	8004ed0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f12:	4619      	mov	r1, r3
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f847 	bl	8004fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f1a:	e023      	b.n	8004f64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <HAL_UART_IRQHandler+0x4f4>
 8004f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f90c 	bl	8005152 <UART_Transmit_IT>
    return;
 8004f3a:	e014      	b.n	8004f66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00e      	beq.n	8004f66 <HAL_UART_IRQHandler+0x51e>
 8004f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f94c 	bl	80051f2 <UART_EndTransmit_IT>
    return;
 8004f5a:	e004      	b.n	8004f66 <HAL_UART_IRQHandler+0x51e>
    return;
 8004f5c:	bf00      	nop
 8004f5e:	e002      	b.n	8004f66 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f60:	bf00      	nop
 8004f62:	e000      	b.n	8004f66 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f64:	bf00      	nop
  }
}
 8004f66:	37e8      	adds	r7, #232	@ 0xe8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	88fa      	ldrh	r2, [r7, #6]
 8004fd8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	88fa      	ldrh	r2, [r7, #6]
 8004fde:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2222      	movs	r2, #34	@ 0x22
 8004fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d007      	beq.n	8005006 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005004:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695a      	ldr	r2, [r3, #20]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0201 	orr.w	r2, r2, #1
 8005014:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0220 	orr.w	r2, r2, #32
 8005024:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005034:	b480      	push	{r7}
 8005036:	b095      	sub	sp, #84	@ 0x54
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	330c      	adds	r3, #12
 800505a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800505c:	643a      	str	r2, [r7, #64]	@ 0x40
 800505e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005062:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800506a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e5      	bne.n	800503c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3314      	adds	r3, #20
 8005076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3314      	adds	r3, #20
 800508e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005090:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005092:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e5      	bne.n	8005070 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d119      	bne.n	80050e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	330c      	adds	r3, #12
 80050b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f023 0310 	bic.w	r3, r3, #16
 80050c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	330c      	adds	r3, #12
 80050ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050cc:	61ba      	str	r2, [r7, #24]
 80050ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6979      	ldr	r1, [r7, #20]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	613b      	str	r3, [r7, #16]
   return(result);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e5      	bne.n	80050ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80050ee:	bf00      	nop
 80050f0:	3754      	adds	r7, #84	@ 0x54
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005106:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f7ff ff33 	bl	8004f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b084      	sub	sp, #16
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff ff25 	bl	8004f94 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800514a:	bf00      	nop
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b21      	cmp	r3, #33	@ 0x21
 8005164:	d13e      	bne.n	80051e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800516e:	d114      	bne.n	800519a <UART_Transmit_IT+0x48>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d110      	bne.n	800519a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800518c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	1c9a      	adds	r2, r3, #2
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	621a      	str	r2, [r3, #32]
 8005198:	e008      	b.n	80051ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	1c59      	adds	r1, r3, #1
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6211      	str	r1, [r2, #32]
 80051a4:	781a      	ldrb	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	4619      	mov	r1, r3
 80051ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10f      	bne.n	80051e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e000      	b.n	80051e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051e4:	2302      	movs	r3, #2
  }
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005208:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff feaa 	bl	8004f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b08c      	sub	sp, #48	@ 0x30
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b22      	cmp	r3, #34	@ 0x22
 8005234:	f040 80ae 	bne.w	8005394 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005240:	d117      	bne.n	8005272 <UART_Receive_IT+0x50>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d113      	bne.n	8005272 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800524a:	2300      	movs	r3, #0
 800524c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005252:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	b29b      	uxth	r3, r3
 800525c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005260:	b29a      	uxth	r2, r3
 8005262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005264:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526a:	1c9a      	adds	r2, r3, #2
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005270:	e026      	b.n	80052c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005276:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005278:	2300      	movs	r3, #0
 800527a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005284:	d007      	beq.n	8005296 <UART_Receive_IT+0x74>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10a      	bne.n	80052a4 <UART_Receive_IT+0x82>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	b2da      	uxtb	r2, r3
 800529e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	e008      	b.n	80052b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	4619      	mov	r1, r3
 80052ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d15d      	bne.n	8005390 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 0220 	bic.w	r2, r2, #32
 80052e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695a      	ldr	r2, [r3, #20]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0201 	bic.w	r2, r2, #1
 8005302:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005316:	2b01      	cmp	r3, #1
 8005318:	d135      	bne.n	8005386 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	330c      	adds	r3, #12
 8005326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	e853 3f00 	ldrex	r3, [r3]
 800532e:	613b      	str	r3, [r7, #16]
   return(result);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f023 0310 	bic.w	r3, r3, #16
 8005336:	627b      	str	r3, [r7, #36]	@ 0x24
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	330c      	adds	r3, #12
 800533e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005340:	623a      	str	r2, [r7, #32]
 8005342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005344:	69f9      	ldr	r1, [r7, #28]
 8005346:	6a3a      	ldr	r2, [r7, #32]
 8005348:	e841 2300 	strex	r3, r2, [r1]
 800534c:	61bb      	str	r3, [r7, #24]
   return(result);
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1e5      	bne.n	8005320 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0310 	and.w	r3, r3, #16
 800535e:	2b10      	cmp	r3, #16
 8005360:	d10a      	bne.n	8005378 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800537c:	4619      	mov	r1, r3
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff fe12 	bl	8004fa8 <HAL_UARTEx_RxEventCallback>
 8005384:	e002      	b.n	800538c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fb fbee 	bl	8000b68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	e002      	b.n	8005396 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	e000      	b.n	8005396 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005394:	2302      	movs	r3, #2
  }
}
 8005396:	4618      	mov	r0, r3
 8005398:	3730      	adds	r7, #48	@ 0x30
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053a4:	b0c0      	sub	sp, #256	@ 0x100
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053bc:	68d9      	ldr	r1, [r3, #12]
 80053be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	ea40 0301 	orr.w	r3, r0, r1
 80053c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	431a      	orrs	r2, r3
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80053f8:	f021 010c 	bic.w	r1, r1, #12
 80053fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005406:	430b      	orrs	r3, r1
 8005408:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800540a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800541a:	6999      	ldr	r1, [r3, #24]
 800541c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	ea40 0301 	orr.w	r3, r0, r1
 8005426:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	4b8f      	ldr	r3, [pc, #572]	@ (800566c <UART_SetConfig+0x2cc>)
 8005430:	429a      	cmp	r2, r3
 8005432:	d005      	beq.n	8005440 <UART_SetConfig+0xa0>
 8005434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	4b8d      	ldr	r3, [pc, #564]	@ (8005670 <UART_SetConfig+0x2d0>)
 800543c:	429a      	cmp	r2, r3
 800543e:	d104      	bne.n	800544a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005440:	f7fd fd60 	bl	8002f04 <HAL_RCC_GetPCLK2Freq>
 8005444:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005448:	e003      	b.n	8005452 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800544a:	f7fd fd47 	bl	8002edc <HAL_RCC_GetPCLK1Freq>
 800544e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800545c:	f040 810c 	bne.w	8005678 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005464:	2200      	movs	r2, #0
 8005466:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800546a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800546e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005472:	4622      	mov	r2, r4
 8005474:	462b      	mov	r3, r5
 8005476:	1891      	adds	r1, r2, r2
 8005478:	65b9      	str	r1, [r7, #88]	@ 0x58
 800547a:	415b      	adcs	r3, r3
 800547c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800547e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005482:	4621      	mov	r1, r4
 8005484:	eb12 0801 	adds.w	r8, r2, r1
 8005488:	4629      	mov	r1, r5
 800548a:	eb43 0901 	adc.w	r9, r3, r1
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	f04f 0300 	mov.w	r3, #0
 8005496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800549a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800549e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054a2:	4690      	mov	r8, r2
 80054a4:	4699      	mov	r9, r3
 80054a6:	4623      	mov	r3, r4
 80054a8:	eb18 0303 	adds.w	r3, r8, r3
 80054ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80054b0:	462b      	mov	r3, r5
 80054b2:	eb49 0303 	adc.w	r3, r9, r3
 80054b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80054ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80054ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80054ce:	460b      	mov	r3, r1
 80054d0:	18db      	adds	r3, r3, r3
 80054d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80054d4:	4613      	mov	r3, r2
 80054d6:	eb42 0303 	adc.w	r3, r2, r3
 80054da:	657b      	str	r3, [r7, #84]	@ 0x54
 80054dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80054e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80054e4:	f7fb f97e 	bl	80007e4 <__aeabi_uldivmod>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4b61      	ldr	r3, [pc, #388]	@ (8005674 <UART_SetConfig+0x2d4>)
 80054ee:	fba3 2302 	umull	r2, r3, r3, r2
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	011c      	lsls	r4, r3, #4
 80054f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005500:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005504:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005508:	4642      	mov	r2, r8
 800550a:	464b      	mov	r3, r9
 800550c:	1891      	adds	r1, r2, r2
 800550e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005510:	415b      	adcs	r3, r3
 8005512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005514:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005518:	4641      	mov	r1, r8
 800551a:	eb12 0a01 	adds.w	sl, r2, r1
 800551e:	4649      	mov	r1, r9
 8005520:	eb43 0b01 	adc.w	fp, r3, r1
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005530:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005538:	4692      	mov	sl, r2
 800553a:	469b      	mov	fp, r3
 800553c:	4643      	mov	r3, r8
 800553e:	eb1a 0303 	adds.w	r3, sl, r3
 8005542:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005546:	464b      	mov	r3, r9
 8005548:	eb4b 0303 	adc.w	r3, fp, r3
 800554c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800555c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005560:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005564:	460b      	mov	r3, r1
 8005566:	18db      	adds	r3, r3, r3
 8005568:	643b      	str	r3, [r7, #64]	@ 0x40
 800556a:	4613      	mov	r3, r2
 800556c:	eb42 0303 	adc.w	r3, r2, r3
 8005570:	647b      	str	r3, [r7, #68]	@ 0x44
 8005572:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005576:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800557a:	f7fb f933 	bl	80007e4 <__aeabi_uldivmod>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4611      	mov	r1, r2
 8005584:	4b3b      	ldr	r3, [pc, #236]	@ (8005674 <UART_SetConfig+0x2d4>)
 8005586:	fba3 2301 	umull	r2, r3, r3, r1
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	2264      	movs	r2, #100	@ 0x64
 800558e:	fb02 f303 	mul.w	r3, r2, r3
 8005592:	1acb      	subs	r3, r1, r3
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800559a:	4b36      	ldr	r3, [pc, #216]	@ (8005674 <UART_SetConfig+0x2d4>)
 800559c:	fba3 2302 	umull	r2, r3, r3, r2
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80055a8:	441c      	add	r4, r3
 80055aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80055b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80055bc:	4642      	mov	r2, r8
 80055be:	464b      	mov	r3, r9
 80055c0:	1891      	adds	r1, r2, r2
 80055c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80055c4:	415b      	adcs	r3, r3
 80055c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80055cc:	4641      	mov	r1, r8
 80055ce:	1851      	adds	r1, r2, r1
 80055d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80055d2:	4649      	mov	r1, r9
 80055d4:	414b      	adcs	r3, r1
 80055d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80055e4:	4659      	mov	r1, fp
 80055e6:	00cb      	lsls	r3, r1, #3
 80055e8:	4651      	mov	r1, sl
 80055ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ee:	4651      	mov	r1, sl
 80055f0:	00ca      	lsls	r2, r1, #3
 80055f2:	4610      	mov	r0, r2
 80055f4:	4619      	mov	r1, r3
 80055f6:	4603      	mov	r3, r0
 80055f8:	4642      	mov	r2, r8
 80055fa:	189b      	adds	r3, r3, r2
 80055fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005600:	464b      	mov	r3, r9
 8005602:	460a      	mov	r2, r1
 8005604:	eb42 0303 	adc.w	r3, r2, r3
 8005608:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005618:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800561c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005620:	460b      	mov	r3, r1
 8005622:	18db      	adds	r3, r3, r3
 8005624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005626:	4613      	mov	r3, r2
 8005628:	eb42 0303 	adc.w	r3, r2, r3
 800562c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800562e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005632:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005636:	f7fb f8d5 	bl	80007e4 <__aeabi_uldivmod>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4b0d      	ldr	r3, [pc, #52]	@ (8005674 <UART_SetConfig+0x2d4>)
 8005640:	fba3 1302 	umull	r1, r3, r3, r2
 8005644:	095b      	lsrs	r3, r3, #5
 8005646:	2164      	movs	r1, #100	@ 0x64
 8005648:	fb01 f303 	mul.w	r3, r1, r3
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	3332      	adds	r3, #50	@ 0x32
 8005652:	4a08      	ldr	r2, [pc, #32]	@ (8005674 <UART_SetConfig+0x2d4>)
 8005654:	fba2 2303 	umull	r2, r3, r2, r3
 8005658:	095b      	lsrs	r3, r3, #5
 800565a:	f003 0207 	and.w	r2, r3, #7
 800565e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4422      	add	r2, r4
 8005666:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005668:	e106      	b.n	8005878 <UART_SetConfig+0x4d8>
 800566a:	bf00      	nop
 800566c:	40011000 	.word	0x40011000
 8005670:	40011400 	.word	0x40011400
 8005674:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800567c:	2200      	movs	r2, #0
 800567e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005682:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005686:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800568a:	4642      	mov	r2, r8
 800568c:	464b      	mov	r3, r9
 800568e:	1891      	adds	r1, r2, r2
 8005690:	6239      	str	r1, [r7, #32]
 8005692:	415b      	adcs	r3, r3
 8005694:	627b      	str	r3, [r7, #36]	@ 0x24
 8005696:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800569a:	4641      	mov	r1, r8
 800569c:	1854      	adds	r4, r2, r1
 800569e:	4649      	mov	r1, r9
 80056a0:	eb43 0501 	adc.w	r5, r3, r1
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	00eb      	lsls	r3, r5, #3
 80056ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056b2:	00e2      	lsls	r2, r4, #3
 80056b4:	4614      	mov	r4, r2
 80056b6:	461d      	mov	r5, r3
 80056b8:	4643      	mov	r3, r8
 80056ba:	18e3      	adds	r3, r4, r3
 80056bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056c0:	464b      	mov	r3, r9
 80056c2:	eb45 0303 	adc.w	r3, r5, r3
 80056c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	f04f 0300 	mov.w	r3, #0
 80056e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80056e6:	4629      	mov	r1, r5
 80056e8:	008b      	lsls	r3, r1, #2
 80056ea:	4621      	mov	r1, r4
 80056ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056f0:	4621      	mov	r1, r4
 80056f2:	008a      	lsls	r2, r1, #2
 80056f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80056f8:	f7fb f874 	bl	80007e4 <__aeabi_uldivmod>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4b60      	ldr	r3, [pc, #384]	@ (8005884 <UART_SetConfig+0x4e4>)
 8005702:	fba3 2302 	umull	r2, r3, r3, r2
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	011c      	lsls	r4, r3, #4
 800570a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800570e:	2200      	movs	r2, #0
 8005710:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005714:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005718:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800571c:	4642      	mov	r2, r8
 800571e:	464b      	mov	r3, r9
 8005720:	1891      	adds	r1, r2, r2
 8005722:	61b9      	str	r1, [r7, #24]
 8005724:	415b      	adcs	r3, r3
 8005726:	61fb      	str	r3, [r7, #28]
 8005728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800572c:	4641      	mov	r1, r8
 800572e:	1851      	adds	r1, r2, r1
 8005730:	6139      	str	r1, [r7, #16]
 8005732:	4649      	mov	r1, r9
 8005734:	414b      	adcs	r3, r1
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005744:	4659      	mov	r1, fp
 8005746:	00cb      	lsls	r3, r1, #3
 8005748:	4651      	mov	r1, sl
 800574a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800574e:	4651      	mov	r1, sl
 8005750:	00ca      	lsls	r2, r1, #3
 8005752:	4610      	mov	r0, r2
 8005754:	4619      	mov	r1, r3
 8005756:	4603      	mov	r3, r0
 8005758:	4642      	mov	r2, r8
 800575a:	189b      	adds	r3, r3, r2
 800575c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005760:	464b      	mov	r3, r9
 8005762:	460a      	mov	r2, r1
 8005764:	eb42 0303 	adc.w	r3, r2, r3
 8005768:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005776:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005778:	f04f 0200 	mov.w	r2, #0
 800577c:	f04f 0300 	mov.w	r3, #0
 8005780:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005784:	4649      	mov	r1, r9
 8005786:	008b      	lsls	r3, r1, #2
 8005788:	4641      	mov	r1, r8
 800578a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800578e:	4641      	mov	r1, r8
 8005790:	008a      	lsls	r2, r1, #2
 8005792:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005796:	f7fb f825 	bl	80007e4 <__aeabi_uldivmod>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4611      	mov	r1, r2
 80057a0:	4b38      	ldr	r3, [pc, #224]	@ (8005884 <UART_SetConfig+0x4e4>)
 80057a2:	fba3 2301 	umull	r2, r3, r3, r1
 80057a6:	095b      	lsrs	r3, r3, #5
 80057a8:	2264      	movs	r2, #100	@ 0x64
 80057aa:	fb02 f303 	mul.w	r3, r2, r3
 80057ae:	1acb      	subs	r3, r1, r3
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	3332      	adds	r3, #50	@ 0x32
 80057b4:	4a33      	ldr	r2, [pc, #204]	@ (8005884 <UART_SetConfig+0x4e4>)
 80057b6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ba:	095b      	lsrs	r3, r3, #5
 80057bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057c0:	441c      	add	r4, r3
 80057c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057c6:	2200      	movs	r2, #0
 80057c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80057ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80057cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80057d0:	4642      	mov	r2, r8
 80057d2:	464b      	mov	r3, r9
 80057d4:	1891      	adds	r1, r2, r2
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	415b      	adcs	r3, r3
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057e0:	4641      	mov	r1, r8
 80057e2:	1851      	adds	r1, r2, r1
 80057e4:	6039      	str	r1, [r7, #0]
 80057e6:	4649      	mov	r1, r9
 80057e8:	414b      	adcs	r3, r1
 80057ea:	607b      	str	r3, [r7, #4]
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057f8:	4659      	mov	r1, fp
 80057fa:	00cb      	lsls	r3, r1, #3
 80057fc:	4651      	mov	r1, sl
 80057fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005802:	4651      	mov	r1, sl
 8005804:	00ca      	lsls	r2, r1, #3
 8005806:	4610      	mov	r0, r2
 8005808:	4619      	mov	r1, r3
 800580a:	4603      	mov	r3, r0
 800580c:	4642      	mov	r2, r8
 800580e:	189b      	adds	r3, r3, r2
 8005810:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005812:	464b      	mov	r3, r9
 8005814:	460a      	mov	r2, r1
 8005816:	eb42 0303 	adc.w	r3, r2, r3
 800581a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	663b      	str	r3, [r7, #96]	@ 0x60
 8005826:	667a      	str	r2, [r7, #100]	@ 0x64
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005834:	4649      	mov	r1, r9
 8005836:	008b      	lsls	r3, r1, #2
 8005838:	4641      	mov	r1, r8
 800583a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800583e:	4641      	mov	r1, r8
 8005840:	008a      	lsls	r2, r1, #2
 8005842:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005846:	f7fa ffcd 	bl	80007e4 <__aeabi_uldivmod>
 800584a:	4602      	mov	r2, r0
 800584c:	460b      	mov	r3, r1
 800584e:	4b0d      	ldr	r3, [pc, #52]	@ (8005884 <UART_SetConfig+0x4e4>)
 8005850:	fba3 1302 	umull	r1, r3, r3, r2
 8005854:	095b      	lsrs	r3, r3, #5
 8005856:	2164      	movs	r1, #100	@ 0x64
 8005858:	fb01 f303 	mul.w	r3, r1, r3
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	011b      	lsls	r3, r3, #4
 8005860:	3332      	adds	r3, #50	@ 0x32
 8005862:	4a08      	ldr	r2, [pc, #32]	@ (8005884 <UART_SetConfig+0x4e4>)
 8005864:	fba2 2303 	umull	r2, r3, r2, r3
 8005868:	095b      	lsrs	r3, r3, #5
 800586a:	f003 020f 	and.w	r2, r3, #15
 800586e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4422      	add	r2, r4
 8005876:	609a      	str	r2, [r3, #8]
}
 8005878:	bf00      	nop
 800587a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800587e:	46bd      	mov	sp, r7
 8005880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005884:	51eb851f 	.word	0x51eb851f

08005888 <memset>:
 8005888:	4402      	add	r2, r0
 800588a:	4603      	mov	r3, r0
 800588c:	4293      	cmp	r3, r2
 800588e:	d100      	bne.n	8005892 <memset+0xa>
 8005890:	4770      	bx	lr
 8005892:	f803 1b01 	strb.w	r1, [r3], #1
 8005896:	e7f9      	b.n	800588c <memset+0x4>

08005898 <__libc_init_array>:
 8005898:	b570      	push	{r4, r5, r6, lr}
 800589a:	4d0d      	ldr	r5, [pc, #52]	@ (80058d0 <__libc_init_array+0x38>)
 800589c:	4c0d      	ldr	r4, [pc, #52]	@ (80058d4 <__libc_init_array+0x3c>)
 800589e:	1b64      	subs	r4, r4, r5
 80058a0:	10a4      	asrs	r4, r4, #2
 80058a2:	2600      	movs	r6, #0
 80058a4:	42a6      	cmp	r6, r4
 80058a6:	d109      	bne.n	80058bc <__libc_init_array+0x24>
 80058a8:	4d0b      	ldr	r5, [pc, #44]	@ (80058d8 <__libc_init_array+0x40>)
 80058aa:	4c0c      	ldr	r4, [pc, #48]	@ (80058dc <__libc_init_array+0x44>)
 80058ac:	f000 f818 	bl	80058e0 <_init>
 80058b0:	1b64      	subs	r4, r4, r5
 80058b2:	10a4      	asrs	r4, r4, #2
 80058b4:	2600      	movs	r6, #0
 80058b6:	42a6      	cmp	r6, r4
 80058b8:	d105      	bne.n	80058c6 <__libc_init_array+0x2e>
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
 80058bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80058c0:	4798      	blx	r3
 80058c2:	3601      	adds	r6, #1
 80058c4:	e7ee      	b.n	80058a4 <__libc_init_array+0xc>
 80058c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ca:	4798      	blx	r3
 80058cc:	3601      	adds	r6, #1
 80058ce:	e7f2      	b.n	80058b6 <__libc_init_array+0x1e>
 80058d0:	08005918 	.word	0x08005918
 80058d4:	08005918 	.word	0x08005918
 80058d8:	08005918 	.word	0x08005918
 80058dc:	0800591c 	.word	0x0800591c

080058e0 <_init>:
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e2:	bf00      	nop
 80058e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e6:	bc08      	pop	{r3}
 80058e8:	469e      	mov	lr, r3
 80058ea:	4770      	bx	lr

080058ec <_fini>:
 80058ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ee:	bf00      	nop
 80058f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f2:	bc08      	pop	{r3}
 80058f4:	469e      	mov	lr, r3
 80058f6:	4770      	bx	lr
